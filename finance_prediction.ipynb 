{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 824,
   "id": "a42af90a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "id": "505e4c32",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_excel('/Users/spring/Desktop/Maching Coursework/20414858.xlsx',header=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "123abd0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename unnamed first column\n",
    "data.rename(columns={ data.columns[0]: 'company_code'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "d242de45",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.rename(columns={ data.columns[4]: 'Year_of_Fraud'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "e56a2473",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_code', 'IPO Time', 'Industry', 'Fraud (yes=1,no= #N/A)',\n",
       "       'Year_of_Fraud', '('Asset Index from year 2006 to 2018', 2006)',\n",
       "       '('Asset Index from year 2006 to 2018', 2007)',\n",
       "       '('Asset Index from year 2006 to 2018', 2008)',\n",
       "       '('Asset Index from year 2006 to 2018', 2009)',\n",
       "       '('Asset Index from year 2006 to 2018', 2010)',\n",
       "       ...\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2010)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2011)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2012)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2016)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2017)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2018)',\n",
       "       'IPO_Time'],\n",
       "      dtype='object', length=162)"
      ]
     },
     "execution_count": 660,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "id": "1f5cff61",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Industry distribution'}>"
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Industry'].value_counts().sort_values().plot(kind = 'barh', color='gray', title= 'Industry distribution')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "27732b37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Fraud distribution'}>"
      ]
     },
     "execution_count": 673,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Fraud (yes=1,no= #N/A)'].value_counts().sort_values().plot(kind = 'barh', color='slategray', title= 'Fraud distribution')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "id": "3cde5106",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ratio of fraudulent cases: 0.2552\n",
      "Ratio of non-fraudulent cases: 0.7448\n"
     ]
    }
   ],
   "source": [
    "ratio_cases = data['Fraud (yes=1,no= #N/A)'].value_counts()/len(data['Fraud (yes=1,no= #N/A)'].index)\n",
    "print(f'Ratio of fraudulent cases: {ratio_cases[1]}\\nRatio of non-fraudulent cases: {ratio_cases[0]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "id": "73450a4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 825,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# missing value visualisation\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.heatmap(data.isna().transpose(),\n",
    "            cmap=\"YlGnBu\",\n",
    "            cbar_kws={'label': 'Missing Data'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "id": "7561e9d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_code', 'IPO Time', 'Industry', 'Fraud (yes=1,no= #N/A)',\n",
       "       'Year_of_Fraud', '('Asset Index from year 2006 to 2018', 2006)',\n",
       "       '('Asset Index from year 2006 to 2018', 2007)',\n",
       "       '('Asset Index from year 2006 to 2018', 2008)',\n",
       "       '('Asset Index from year 2006 to 2018', 2009)',\n",
       "       '('Asset Index from year 2006 to 2018', 2010)',\n",
       "       ...\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2010)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2011)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2012)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2016)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2017)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2018)',\n",
       "       'IPO_Time'],\n",
       "      dtype='object', length=162)"
      ]
     },
     "execution_count": 842,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "336aebd0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d5ff677",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "1c5a0c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# change IPO Time datatype to datetime\n",
    "import time\n",
    "data['IPO_Time'] = data['IPO Time'].apply(lambda x:time.mktime(time.strptime(x,'%Y-%m-%d')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "ada5f013",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_code</th>\n",
       "      <th>IPO Time</th>\n",
       "      <th>Industry</th>\n",
       "      <th>Fraud (yes=1,no= #N/A)</th>\n",
       "      <th>Year_of_Fraud</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2006)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2007)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2008)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2009)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2010)</th>\n",
       "      <th>...</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2010)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2011)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2012)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2017)</th>\n",
       "      <th>('Time lag of annual report disclosure (days) from year 2006 to 2018', 2018)</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>688368.SH</td>\n",
       "      <td>2019-10-14</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1017.0</td>\n",
       "      <td>853.0</td>\n",
       "      <td>990</td>\n",
       "      <td>625</td>\n",
       "      <td>260</td>\n",
       "      <td>1.570982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>603015.SH</td>\n",
       "      <td>2015-03-03</td>\n",
       "      <td>Electrical equipment</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1129.0</td>\n",
       "      <td>763.0</td>\n",
       "      <td>398.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>117</td>\n",
       "      <td>118</td>\n",
       "      <td>113</td>\n",
       "      <td>1.425312e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>300535.SZ</td>\n",
       "      <td>2016-08-12</td>\n",
       "      <td>chemical industry</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>858.0</td>\n",
       "      <td>914.0</td>\n",
       "      <td>940.0</td>\n",
       "      <td>575.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>97</td>\n",
       "      <td>103</td>\n",
       "      <td>102</td>\n",
       "      <td>1.470931e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>603767.SH</td>\n",
       "      <td>2017-06-13</td>\n",
       "      <td>automobile</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.865496</td>\n",
       "      <td>0.938833</td>\n",
       "      <td>...</td>\n",
       "      <td>655.0</td>\n",
       "      <td>290.0</td>\n",
       "      <td>1047.0</td>\n",
       "      <td>682.0</td>\n",
       "      <td>853.0</td>\n",
       "      <td>488.0</td>\n",
       "      <td>122</td>\n",
       "      <td>107</td>\n",
       "      <td>88</td>\n",
       "      <td>1.497283e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 162 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  company_code    IPO Time              Industry  Fraud (yes=1,no= #N/A)  \\\n",
       "0    688368.SH  2019-10-14           Electronics                       0   \n",
       "1    603015.SH  2015-03-03  Electrical equipment                       0   \n",
       "2    300535.SZ  2016-08-12     chemical industry                       0   \n",
       "3    603767.SH  2017-06-13            automobile                       0   \n",
       "\n",
       "  Year_of_Fraud  ('Asset Index from year 2006 to 2018', 2006)  \\\n",
       "0           NaN                                           NaN   \n",
       "1           NaN                                           NaN   \n",
       "2           NaN                                           NaN   \n",
       "3           NaN                                           NaN   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2007)  \\\n",
       "0                                           NaN   \n",
       "1                                           NaN   \n",
       "2                                           NaN   \n",
       "3                                           NaN   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2008)  \\\n",
       "0                                           NaN   \n",
       "1                                           NaN   \n",
       "2                                           NaN   \n",
       "3                                           NaN   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2009)  \\\n",
       "0                                           NaN   \n",
       "1                                           NaN   \n",
       "2                                           NaN   \n",
       "3                                      0.865496   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2010)  ...  \\\n",
       "0                                           NaN  ...   \n",
       "1                                           NaN  ...   \n",
       "2                                           NaN  ...   \n",
       "3                                      0.938833  ...   \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2010)  \\\n",
       "0                                                NaN                              \n",
       "1                                                NaN                              \n",
       "2                                                NaN                              \n",
       "3                                              655.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2011)  \\\n",
       "0                                                NaN                              \n",
       "1                                             1129.0                              \n",
       "2                                              858.0                              \n",
       "3                                              290.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2012)  \\\n",
       "0                                                NaN                              \n",
       "1                                              763.0                              \n",
       "2                                              914.0                              \n",
       "3                                             1047.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)  \\\n",
       "0                                                NaN                              \n",
       "1                                              398.0                              \n",
       "2                                              940.0                              \n",
       "3                                              682.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)  \\\n",
       "0                                             1017.0                              \n",
       "1                                              104.0                              \n",
       "2                                              575.0                              \n",
       "3                                              853.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015)  \\\n",
       "0                                              853.0                              \n",
       "1                                              117.0                              \n",
       "2                                              210.0                              \n",
       "3                                              488.0                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2016)  \\\n",
       "0                                                990                              \n",
       "1                                                117                              \n",
       "2                                                 97                              \n",
       "3                                                122                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2017)  \\\n",
       "0                                                625                              \n",
       "1                                                118                              \n",
       "2                                                103                              \n",
       "3                                                107                              \n",
       "\n",
       "   ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2018)  \\\n",
       "0                                                260                              \n",
       "1                                                113                              \n",
       "2                                                102                              \n",
       "3                                                 88                              \n",
       "\n",
       "       IPO_Time  \n",
       "0  1.570982e+09  \n",
       "1  1.425312e+09  \n",
       "2  1.470931e+09  \n",
       "3  1.497283e+09  \n",
       "\n",
       "[4 rows x 162 columns]"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "fd0b40f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_code', 'IPO Time', 'Industry', 'Fraud (yes=1,no= #N/A)',\n",
       "       'Year_of_Fraud', '('Asset Index from year 2006 to 2018', 2006)',\n",
       "       '('Asset Index from year 2006 to 2018', 2007)',\n",
       "       '('Asset Index from year 2006 to 2018', 2008)',\n",
       "       '('Asset Index from year 2006 to 2018', 2009)',\n",
       "       '('Asset Index from year 2006 to 2018', 2010)',\n",
       "       ...\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2010)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2011)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2012)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2016)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2017)',\n",
       "       '('Time lag of annual report disclosure (days) from year 2006 to 2018', 2018)',\n",
       "       'IPO_Time'],\n",
       "      dtype='object', length=162)"
      ]
     },
     "execution_count": 674,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 852,
   "id": "c1b20569",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define function to get y_train, y_valid and y_test \n",
    "# extract 2016 fraud companies as  y_train_2016\n",
    "\n",
    "def function(a):\n",
    "    if str(2016) in str(a): # str(a)\n",
    "        return 1 \n",
    "    else:\n",
    "        return 0\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 853,
   "id": "6066cd67",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['y_train_2016'] = data.apply(lambda x: function(x.Year_of_Fraud), axis = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 854,
   "id": "67f9c636",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2428\n",
       "1      72\n",
       "Name: y_train_2016, dtype: int64"
      ]
     },
     "execution_count": 854,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# result of 2016 fraud companies and 2016 not fraud companies\n",
    "\n",
    "data['y_train_2016'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 855,
   "id": "08044e55",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train= data['y_train_2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d4726753",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2428\n",
       "1      72\n",
       "Name: y_train_2016, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "94cec1b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# asset_index\n",
    "asset= data.iloc[:, 5:18]\n",
    "Leverage_Ratio= data.iloc[:,18:31]\n",
    "Net_Profit_Ratio= data.iloc[:,31:44]\n",
    "Growth_rate_sales_revenue= data.iloc[:,44:57]\n",
    "Net_operating= data.iloc[:,57:70]\n",
    "Turnover_total_assets= data.iloc[:,70:83]\n",
    "Change_rate_receivable_turnover= data.iloc[:,83:96]\n",
    "Inventory_Growth_Rate= data.iloc[:,96:109]\n",
    "Growth_rate_accounts_receivable= data.iloc[:,109:122]\n",
    "Growth_rate_sales_manag_expen= data.iloc[:,122:135]\n",
    "Big_4= data.iloc[:,135:148]\n",
    "Time_lag=data.iloc[:,148:161]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "id": "5e78c817",
   "metadata": {},
   "outputs": [],
   "source": [
    "# select 2013, 2014, 2015 as x_train data\n",
    "asset_x_train= asset.iloc[:,7:10]\n",
    "Leverage_Ratio_x_train= Leverage_Ratio.iloc[:,7:10]\n",
    "Net_Profit_Ratio_x_train= Net_Profit_Ratio.iloc[:,7:10]\n",
    "Growth_rate_sales_revenue_x_train= Growth_rate_sales_revenue.iloc[:,7:10]\n",
    "Net_operating_x_train= Net_operating.iloc[:,7:10]\n",
    "\n",
    "Turnover_total_assets_x_train= Turnover_total_assets.iloc[:,7:10]\n",
    "Change_rate_receivable_turnover_x_train= Change_rate_receivable_turnover.iloc[:,7:10]\n",
    "Inventory_Growth_Rate_x_train= Inventory_Growth_Rate.iloc[:,7:10]\n",
    "Growth_rate_accounts_receivable_x_train= Growth_rate_accounts_receivable.iloc[:,7:10]\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_train= Growth_rate_sales_manag_expen.iloc[:,7:10]\n",
    "\n",
    "Time_lag_x_train= Time_lag.iloc[:,7:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "49dc5c62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2013)</th>\n",
       "      <th>('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2014)</th>\n",
       "      <th>('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2015)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2013)  \\\n",
       "0                                                 --                                       \n",
       "1                                                  0                                       \n",
       "\n",
       "  ('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2014)  \\\n",
       "0                                                 --                                       \n",
       "1                                                  0                                       \n",
       "\n",
       "  ('Whether the audit is conducted by big 4 from year 2006 to 2018 (yes=1, no=0)', 2015)  \n",
       "0                                                 --                                      \n",
       "1                                                  0                                      "
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Big_4_x_train.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "id": "ac7ced84",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "3168b5f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>big4_conduct, 2006, no</th>\n",
       "      <th>big4_conduct, 2006, yes</th>\n",
       "      <th>big4_conduct, 2006, unknown</th>\n",
       "      <th>big4_conduct, 2007, no</th>\n",
       "      <th>big4_conduct, 2007, yes</th>\n",
       "      <th>big4_conduct, 2007, unknown</th>\n",
       "      <th>big4_conduct, 2008, no</th>\n",
       "      <th>big4_conduct, 2008, yes</th>\n",
       "      <th>big4_conduct, 2008, unknown</th>\n",
       "      <th>big4_conduct, 2009, no</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>big4_conduct, 2017, no</th>\n",
       "      <th>big4_conduct, 2017, yes</th>\n",
       "      <th>big4_conduct, 2017, unknown</th>\n",
       "      <th>big4_conduct, 2018, no</th>\n",
       "      <th>big4_conduct, 2018, yes</th>\n",
       "      <th>big4_conduct, 2018, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2495</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2496</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2500 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      big4_conduct, 2006, no  big4_conduct, 2006, yes  \\\n",
       "0                        0.0                      0.0   \n",
       "1                        0.0                      0.0   \n",
       "2                        0.0                      0.0   \n",
       "3                        0.0                      0.0   \n",
       "4                        0.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     0.0                      0.0   \n",
       "2497                     0.0                      0.0   \n",
       "2498                     0.0                      0.0   \n",
       "2499                     0.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2006, unknown  big4_conduct, 2007, no  \\\n",
       "0                             1.0                     0.0   \n",
       "1                             1.0                     0.0   \n",
       "2                             1.0                     0.0   \n",
       "3                             1.0                     0.0   \n",
       "4                             1.0                     0.0   \n",
       "...                           ...                     ...   \n",
       "2495                          0.0                     1.0   \n",
       "2496                          1.0                     0.0   \n",
       "2497                          1.0                     0.0   \n",
       "2498                          1.0                     1.0   \n",
       "2499                          1.0                     0.0   \n",
       "\n",
       "      big4_conduct, 2007, yes  big4_conduct, 2007, unknown  \\\n",
       "0                         0.0                          1.0   \n",
       "1                         0.0                          1.0   \n",
       "2                         0.0                          1.0   \n",
       "3                         0.0                          1.0   \n",
       "4                         0.0                          1.0   \n",
       "...                       ...                          ...   \n",
       "2495                      0.0                          0.0   \n",
       "2496                      0.0                          1.0   \n",
       "2497                      0.0                          1.0   \n",
       "2498                      0.0                          0.0   \n",
       "2499                      0.0                          1.0   \n",
       "\n",
       "      big4_conduct, 2008, no  big4_conduct, 2008, yes  \\\n",
       "0                        0.0                      0.0   \n",
       "1                        0.0                      0.0   \n",
       "2                        0.0                      0.0   \n",
       "3                        0.0                      0.0   \n",
       "4                        0.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     1.0                      0.0   \n",
       "2497                     1.0                      0.0   \n",
       "2498                     1.0                      0.0   \n",
       "2499                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2008, unknown  big4_conduct, 2009, no  ...  \\\n",
       "0                             1.0                     0.0  ...   \n",
       "1                             1.0                     0.0  ...   \n",
       "2                             1.0                     0.0  ...   \n",
       "3                             1.0                     0.0  ...   \n",
       "4                             1.0                     0.0  ...   \n",
       "...                           ...                     ...  ...   \n",
       "2495                          0.0                     1.0  ...   \n",
       "2496                          0.0                     1.0  ...   \n",
       "2497                          0.0                     1.0  ...   \n",
       "2498                          0.0                     1.0  ...   \n",
       "2499                          0.0                     1.0  ...   \n",
       "\n",
       "      big4_conduct, 2015, unknown  big4_conduct, 2016, no  \\\n",
       "0                             1.0                     1.0   \n",
       "1                             0.0                     1.0   \n",
       "2                             0.0                     1.0   \n",
       "3                             0.0                     1.0   \n",
       "4                             0.0                     1.0   \n",
       "...                           ...                     ...   \n",
       "2495                          0.0                     1.0   \n",
       "2496                          0.0                     1.0   \n",
       "2497                          0.0                     1.0   \n",
       "2498                          0.0                     1.0   \n",
       "2499                          0.0                     1.0   \n",
       "\n",
       "      big4_conduct, 2016, yes  big4_conduct, 2016, unknown  \\\n",
       "0                         0.0                          0.0   \n",
       "1                         0.0                          0.0   \n",
       "2                         0.0                          0.0   \n",
       "3                         0.0                          0.0   \n",
       "4                         0.0                          0.0   \n",
       "...                       ...                          ...   \n",
       "2495                      0.0                          0.0   \n",
       "2496                      0.0                          0.0   \n",
       "2497                      0.0                          0.0   \n",
       "2498                      0.0                          0.0   \n",
       "2499                      0.0                          0.0   \n",
       "\n",
       "      big4_conduct, 2017, no  big4_conduct, 2017, yes  \\\n",
       "0                        1.0                      0.0   \n",
       "1                        1.0                      0.0   \n",
       "2                        1.0                      0.0   \n",
       "3                        1.0                      0.0   \n",
       "4                        1.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     1.0                      0.0   \n",
       "2497                     1.0                      0.0   \n",
       "2498                     1.0                      0.0   \n",
       "2499                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2017, unknown  big4_conduct, 2018, no  \\\n",
       "0                             0.0                     1.0   \n",
       "1                             0.0                     1.0   \n",
       "2                             0.0                     1.0   \n",
       "3                             0.0                     1.0   \n",
       "4                             0.0                     1.0   \n",
       "...                           ...                     ...   \n",
       "2495                          0.0                     1.0   \n",
       "2496                          0.0                     1.0   \n",
       "2497                          0.0                     1.0   \n",
       "2498                          0.0                     1.0   \n",
       "2499                          0.0                     1.0   \n",
       "\n",
       "      big4_conduct, 2018, yes  big4_conduct, 2018, unknown  \n",
       "0                         0.0                          0.0  \n",
       "1                         0.0                          0.0  \n",
       "2                         0.0                          0.0  \n",
       "3                         0.0                          0.0  \n",
       "4                         0.0                          0.0  \n",
       "...                       ...                          ...  \n",
       "2495                      0.0                          0.0  \n",
       "2496                      0.0                          0.0  \n",
       "2497                      0.0                          0.0  \n",
       "2498                      0.0                          0.0  \n",
       "2499                      0.0                          0.0  \n",
       "\n",
       "[2500 rows x 39 columns]"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add specific columns deatils into its column name\n",
    "\n",
    "a = 'big4_conduct'\n",
    "lst1 = ['no','yes','unknown']\n",
    "lst2 = ['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018']\n",
    "columns_audit = []\n",
    "\n",
    "for i in range(13):\n",
    "    for j in range(3):\n",
    "        columns_audit.append(a+', '+lst2[i]+', '+lst1[j])\n",
    "columns_audit\n",
    "\n",
    "\n",
    "lst = []\n",
    "for i in range(2500):\n",
    "    lst.append(0.0)\n",
    "\n",
    "#onehotencoding\n",
    "\n",
    "Big_4 = Big_4.replace('--',np.nan)\n",
    "Big_4 = Big_4.astype(float)\n",
    "\n",
    "# 没有跑 Big_4 = Big_4.fillna(3)\n",
    "\n",
    "enc = OneHotEncoder(categories='auto').fit(Big_4)\n",
    "\n",
    "Big_4_ohe = enc.transform(Big_4).toarray()\n",
    "Big_4_ohe = pd.DataFrame(Big_4_ohe)\n",
    "Big_4_ohe['38']= lst\n",
    "Big_4_ohe.columns = columns_audit\n",
    "Big_4_ohe\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "id": "7ef3b426",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2014, yes  big4_conduct, 2014, unknown  \\\n",
       "0                      0.0                          1.0   \n",
       "1                      0.0                          0.0   \n",
       "\n",
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2015, unknown  \n",
       "0                          1.0  \n",
       "1                          0.0  "
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Big_4_x_train_ohe= Big_4_ohe.iloc[:,-18:-9]\n",
    "Big_4_x_train_ohe.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "962d9828",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "id": "b5de1092",
   "metadata": {},
   "outputs": [],
   "source": [
    "company_code= data['company_code']\n",
    "IPO_time= data['IPO_Time']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "id": "5d4fffc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine features with company_code\n",
    "\n",
    "IPO_time_x_train= pd.concat([IPO_time, company_code], axis = 1)\n",
    "asset_x_train= pd.concat([asset_x_train, company_code], axis = 1)\n",
    "Leverage_Ratio_x_train= pd.concat([Leverage_Ratio_x_train, company_code], axis = 1)\n",
    "Net_Profit_Ratio_x_train= pd.concat([Net_Profit_Ratio_x_train, company_code], axis = 1)\n",
    "Growth_rate_sales_revenue_x_train= pd.concat([Growth_rate_sales_revenue_x_train, company_code], axis = 1)\n",
    "Net_operating_x_train= pd.concat([Net_operating_x_train, company_code], axis = 1)\n",
    "\n",
    "Turnover_total_assets_x_train= pd.concat([Turnover_total_assets_x_train, company_code], axis = 1)\n",
    "Change_rate_receivable_turnover_x_train= pd.concat([Change_rate_receivable_turnover_x_train, company_code], axis = 1)\n",
    "Inventory_Growth_Rate_x_train= pd.concat([Inventory_Growth_Rate_x_train, company_code], axis = 1)\n",
    "Growth_rate_accounts_receivable_x_train= pd.concat([Growth_rate_accounts_receivable_x_train, company_code], axis = 1)\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_train= pd.concat([Growth_rate_sales_manag_expen_x_train, company_code], axis = 1)\n",
    "Big_4_x_train= pd.concat([Big_4_x_train_ohe, company_code], axis = 1)\n",
    "Time_lag_x_train= pd.concat([Time_lag_x_train, company_code], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "id": "f3427d67",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train= pd.concat([asset_x_train, Leverage_Ratio_x_train], axis = 1, join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "id": "25bf06a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# delete duplicate company_code\n",
    "x_train= x_train.T.drop_duplicates().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "id": "dfd428a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train=  pd.DataFrame.merge(x_train, Net_Profit_Ratio_x_train, how='inner') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "id": "d24c1019",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine the rest features (Big_4_x_train not consider)\n",
    "x_train = pd.DataFrame.merge(x_train,  Growth_rate_sales_revenue_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train,  Net_operating_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train, Turnover_total_assets_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train, Change_rate_receivable_turnover_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train, Inventory_Growth_Rate_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train, Growth_rate_accounts_receivable_x_train, how='inner')\n",
    "x_train = pd.DataFrame.merge(x_train,  Growth_rate_sales_manag_expen_x_train, how='inner') \n",
    "x_train = pd.DataFrame.merge(x_train, Time_lag_x_train, how='inner') \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "id": "abb1c02e",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = pd.DataFrame.merge(x_train, IPO_time_x_train, how='inner') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "id": "5073c583",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = pd.DataFrame.merge(x_train, Big_4_x_train, how='inner') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "id": "22610902",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>company_code</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>...</th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>688368.SH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>...</td>\n",
       "      <td>1.570982e+09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.363352</td>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>603015.SH</td>\n",
       "      <td>1.072965</td>\n",
       "      <td>1.07893</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>0.936174</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>...</td>\n",
       "      <td>1.425312e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.868412</td>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>300535.SZ</td>\n",
       "      <td>0.88106</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.883832</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>...</td>\n",
       "      <td>1.470931e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  ('Asset Index from year 2006 to 2018', 2013)  \\\n",
       "0                                          NaN   \n",
       "1                                     1.363352   \n",
       "2                                     0.868412   \n",
       "\n",
       "  ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                          NaN   \n",
       "1                                     1.291652   \n",
       "2                                     1.165348   \n",
       "\n",
       "  ('Asset Index from year 2006 to 2018', 2015) company_code  \\\n",
       "0                                     1.991758    688368.SH   \n",
       "1                                     0.830398    603015.SH   \n",
       "2                                     1.233075    300535.SZ   \n",
       "\n",
       "  ('Leverage Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                             NaN   \n",
       "1                                        1.072965   \n",
       "2                                         0.88106   \n",
       "\n",
       "  ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                             NaN   \n",
       "1                                         1.07893   \n",
       "2                                        0.968049   \n",
       "\n",
       "  ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                        0.854574   \n",
       "1                                        0.409493   \n",
       "2                                        0.659597   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                                NaN   \n",
       "1                                           0.936174   \n",
       "2                                           0.883832   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.972920   \n",
       "1                                           0.907508   \n",
       "2                                           0.908002   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  ...      IPO_Time  \\\n",
       "0                                           2.192573  ...  1.570982e+09   \n",
       "1                                           1.047607  ...  1.425312e+09   \n",
       "2                                           0.833449  ...  1.470931e+09   \n",
       "\n",
       "   big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "2                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2014, yes big4_conduct, 2014, unknown big4_conduct, 2015, no  \\\n",
       "0                      0.0                         1.0                    0.0   \n",
       "1                      0.0                         0.0                    1.0   \n",
       "2                      0.0                         0.0                    1.0   \n",
       "\n",
       "  big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \n",
       "0                     0.0                          1.0  \n",
       "1                     0.0                          0.0  \n",
       "2                     0.0                          0.0  \n",
       "\n",
       "[3 rows x 44 columns]"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 11 features with 3 year data as x_train\n",
    "\n",
    "x_train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8c8d2fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train dataset\n",
    "\n",
    "x_train\n",
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f55b63e7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "d3e9ebfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_valid 2017\n",
    "def function(a):\n",
    "    if str(2017) in str(a): # str(a)\n",
    "        return 1 \n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "data['y_val_2017'] = data.apply(lambda x: function(x.Year_of_Fraud), axis = 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "ea28dada",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2423\n",
       "1      77\n",
       "Name: y_val_2017, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['y_val_2017'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ec27dc4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_val= data['y_val_2017']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4796fc39",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "id": "172d2c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2014, 2015, 2016 data in these columns are selected.\n",
    "asset_x_val= asset.iloc[:,8:11]\n",
    "Leverage_Ratio_x_val= Leverage_Ratio.iloc[:,8:11]\n",
    "Net_Profit_Ratio_x_val= Net_Profit_Ratio.iloc[:,8:11]\n",
    "Growth_rate_sales_revenue_x_val= Growth_rate_sales_revenue.iloc[:,8:11]\n",
    "Net_operating_x_val= Net_operating.iloc[:,8:11]\n",
    "\n",
    "Turnover_total_assets_x_val= Turnover_total_assets.iloc[:,8:11]\n",
    "Change_rate_receivable_turnover_x_val= Change_rate_receivable_turnover.iloc[:,8:11]\n",
    "Inventory_Growth_Rate_x_val= Inventory_Growth_Rate.iloc[:,8:11]\n",
    "Growth_rate_accounts_receivable_x_val= Growth_rate_accounts_receivable.iloc[:,8:11]\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_val= Growth_rate_sales_manag_expen.iloc[:,8:11]\n",
    "Big_4_x_val= Big_4.iloc[:,8:11]\n",
    "Time_lag_x_val= Time_lag.iloc[:,8:11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "id": "6658cc45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   big4_conduct, 2014, no  big4_conduct, 2014, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2014, unknown  big4_conduct, 2015, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \\\n",
       "0                      0.0                          1.0   \n",
       "1                      0.0                          0.0   \n",
       "\n",
       "   big4_conduct, 2016, no  big4_conduct, 2016, yes  \\\n",
       "0                     1.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2016, unknown  \n",
       "0                          0.0  \n",
       "1                          0.0  "
      ]
     },
     "execution_count": 473,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for feature big_4, extract relavant years data\n",
    "\n",
    "Big_4_x_val_ohe= Big_4_ohe.iloc[:,-15:-6]\n",
    "Big_4_x_val_ohe.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79ee2250",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "id": "a5edc98f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "IPO_time_x_val= pd.concat([IPO_time, company_code], axis = 1)\n",
    "asset_x_val= pd.concat([asset_x_val, company_code], axis = 1)\n",
    "Leverage_Ratio_x_val= pd.concat([Leverage_Ratio_x_val, company_code], axis = 1)\n",
    "Net_Profit_Ratio_x_val= pd.concat([Net_Profit_Ratio_x_val, company_code], axis = 1)\n",
    "Growth_rate_sales_revenue_x_val= pd.concat([Growth_rate_sales_revenue_x_val, company_code], axis = 1)\n",
    "Net_operating_x_val= pd.concat([Net_operating_x_val, company_code], axis = 1)\n",
    "\n",
    "Turnover_total_assets_x_val= pd.concat([Turnover_total_assets_x_val, company_code], axis = 1)\n",
    "Change_rate_receivable_turnover_x_val= pd.concat([Change_rate_receivable_turnover_x_val, company_code], axis = 1)\n",
    "Inventory_Growth_Rate_x_val= pd.concat([Inventory_Growth_Rate_x_val, company_code], axis = 1)\n",
    "Growth_rate_accounts_receivable_x_val= pd.concat([Growth_rate_accounts_receivable_x_val, company_code], axis = 1)\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_val= pd.concat([Growth_rate_sales_manag_expen_x_val, company_code], axis = 1)\n",
    "Big_4_x_val= pd.concat([Big_4_x_val_ohe, company_code], axis = 1)\n",
    "Time_lag_x_val= pd.concat([Time_lag_x_val, company_code], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "id": "d57f13c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine the rest features \n",
    "x_val = pd.DataFrame.merge(asset_x_val, Leverage_Ratio_x_val, how='inner')\n",
    "x_val = pd.DataFrame.merge(x_val,  Net_Profit_Ratio_x_val, how='inner')\n",
    "x_val = pd.DataFrame.merge(x_val,  Growth_rate_sales_revenue_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val,  Net_operating_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Turnover_total_assets_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Change_rate_receivable_turnover_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Inventory_Growth_Rate_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Growth_rate_accounts_receivable_x_val, how='inner')\n",
    "x_val = pd.DataFrame.merge(x_val,  Growth_rate_sales_manag_expen_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Time_lag_x_val, how='inner') \n",
    "x_val = pd.DataFrame.merge(x_val, Big_4_x_val, how='inner')\n",
    "x_val = pd.DataFrame.merge(x_val, IPO_time_x_val, how='inner') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "id": "6640e6a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2016)</th>\n",
       "      <th>company_code</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>NaN</td>\n",
       "      <td>688368.SH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>2.289362</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>1.155750</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.570982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>0.797923</td>\n",
       "      <td>603015.SH</td>\n",
       "      <td>1.078930</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>1.733034</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.158953</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.425312e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.344525</td>\n",
       "      <td>300535.SZ</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.461140</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>0.869091</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.470931e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                           NaN   \n",
       "1                                      1.291652   \n",
       "2                                      1.165348   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      1.991758   \n",
       "1                                      0.830398   \n",
       "2                                      1.233075   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2016) company_code  \\\n",
       "0                                           NaN    688368.SH   \n",
       "1                                      0.797923    603015.SH   \n",
       "2                                      0.344525    300535.SZ   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                              NaN   \n",
       "1                                         1.078930   \n",
       "2                                         0.968049   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                         0.854574   \n",
       "1                                         0.409493   \n",
       "2                                         0.659597   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                         2.289362   \n",
       "1                                         1.733034   \n",
       "2                                         0.461140   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.972920   \n",
       "1                                           0.907508   \n",
       "2                                           0.908002   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           2.192573   \n",
       "1                                           1.047607   \n",
       "2                                           0.833449   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2016)  ...  \\\n",
       "0                                           1.155750  ...   \n",
       "1                                           1.158953  ...   \n",
       "2                                           0.869091  ...   \n",
       "\n",
       "   big4_conduct, 2014, no  big4_conduct, 2014, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2014, unknown  big4_conduct, 2015, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "2                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \\\n",
       "0                      0.0                          1.0   \n",
       "1                      0.0                          0.0   \n",
       "2                      0.0                          0.0   \n",
       "\n",
       "  big4_conduct, 2016, no big4_conduct, 2016, yes  big4_conduct, 2016, unknown  \\\n",
       "0                    1.0                     0.0                          0.0   \n",
       "1                    1.0                     0.0                          0.0   \n",
       "2                    1.0                     0.0                          0.0   \n",
       "\n",
       "       IPO_Time  \n",
       "0  1.570982e+09  \n",
       "1  1.425312e+09  \n",
       "2  1.470931e+09  \n",
       "\n",
       "[3 rows x 44 columns]"
      ]
     },
     "execution_count": 477,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_val.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e5c5db9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_validation \n",
    "\n",
    "x_val\n",
    "y_val "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25fbcdc7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "bec053c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_test\n",
    "\n",
    "\n",
    "def function(a):\n",
    "    if str(2018) in str(a): # str(a)\n",
    "        return 1 \n",
    "    else:\n",
    "        return 0\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "76dd3128",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['y_test_2018'] = data.apply(lambda x: function(x.Year_of_Fraud), axis = 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "ec0a870a",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test= data['y_test_2018']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "b3afaf17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2411\n",
       "1      89\n",
       "Name: y_test_2018, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "id": "a2f176ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x_test\n",
    "# 2015, 2016, and 2017 data in these columns are selected.\n",
    "\n",
    "asset_x_test= asset.iloc[:,9:12]\n",
    "\n",
    "Leverage_Ratio_x_test= Leverage_Ratio.iloc[:,9:12]\n",
    "Net_Profit_Ratio_x_test= Net_Profit_Ratio.iloc[:,9:12]\n",
    "Growth_rate_sales_revenue_x_test= Growth_rate_sales_revenue.iloc[:,9:12]\n",
    "Net_operating_x_test= Net_operating.iloc[:,9:12]\n",
    "\n",
    "Turnover_total_assets_x_test= Turnover_total_assets.iloc[:,9:12]\n",
    "Change_rate_receivable_turnover_x_test= Change_rate_receivable_turnover.iloc[:,9:12]\n",
    "Inventory_Growth_Rate_x_test= Inventory_Growth_Rate.iloc[:,9:12]\n",
    "Growth_rate_accounts_receivable_x_test= Growth_rate_accounts_receivable.iloc[:,9:12]\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_test= Growth_rate_sales_manag_expen.iloc[:,9:12]\n",
    "Big_4_x_test= Big_4.iloc[:,9:12]\n",
    "Time_lag_x_test= Time_lag.iloc[:,9:12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "id": "6b844910",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>big4_conduct, 2017, no</th>\n",
       "      <th>big4_conduct, 2017, yes</th>\n",
       "      <th>big4_conduct, 2017, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2015, unknown  big4_conduct, 2016, no  \\\n",
       "0                          1.0                     1.0   \n",
       "1                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2016, yes  big4_conduct, 2016, unknown  \\\n",
       "0                      0.0                          0.0   \n",
       "1                      0.0                          0.0   \n",
       "\n",
       "   big4_conduct, 2017, no  big4_conduct, 2017, yes  \\\n",
       "0                     1.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2017, unknown  \n",
       "0                          0.0  \n",
       "1                          0.0  "
      ]
     },
     "execution_count": 486,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for feature big_4\n",
    "\n",
    "Big_4_x_test_ohe= Big_4_ohe.iloc[:,-12:-3]\n",
    "Big_4_x_test_ohe.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "id": "15a615ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "asset_x_test= pd.concat([ asset_x_test,company_code ], axis = 1)\n",
    "Leverage_Ratio_x_test= pd.concat([Leverage_Ratio_x_test, company_code], axis = 1)\n",
    "Net_Profit_Ratio_x_test= pd.concat([Net_Profit_Ratio_x_test, company_code], axis = 1)\n",
    "Growth_rate_sales_revenue_x_test= pd.concat([Growth_rate_sales_revenue_x_test, company_code], axis = 1)\n",
    "Net_operating_x_test= pd.concat([Net_operating_x_test, company_code], axis = 1)\n",
    "\n",
    "Turnover_total_assets_x_test= pd.concat([Turnover_total_assets_x_test, company_code], axis = 1)\n",
    "Change_rate_receivable_turnover_x_test= pd.concat([Change_rate_receivable_turnover_x_test, company_code], axis = 1)\n",
    "Inventory_Growth_Rate_x_test= pd.concat([Inventory_Growth_Rate_x_test, company_code], axis = 1)\n",
    "Growth_rate_accounts_receivable_x_test= pd.concat([Growth_rate_accounts_receivable_x_test, company_code], axis = 1)\n",
    "eceivable_x_test= pd.concat([Growth_rate_accounts_receivable_x_test, company_code], axis = 1)\n",
    "\n",
    "Growth_rate_sales_manag_expen_x_test= pd.concat([Growth_rate_sales_manag_expen_x_test, company_code], axis = 1)\n",
    "Big_4_x_test= pd.concat([Big_4_x_test_ohe, company_code], axis = 1)\n",
    "Time_lag_x_test= pd.concat([Time_lag_x_test, company_code], axis = 1)\n",
    "IPO_time_x_test= pd.concat([IPO_time, company_code], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "id": "0b4dab3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine the rest features (Big_4_x_train not consider)\n",
    "x_test = pd.DataFrame.merge(asset_x_test, Leverage_Ratio_x_test, how='inner')\n",
    "x_test = pd.DataFrame.merge(x_test,  Net_Profit_Ratio_x_test, how='inner')\n",
    "x_test = pd.DataFrame.merge(x_test,  Growth_rate_sales_revenue_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test,  Net_operating_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Turnover_total_assets_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Change_rate_receivable_turnover_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Inventory_Growth_Rate_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Growth_rate_accounts_receivable_x_test, how='inner')\n",
    "x_test = pd.DataFrame.merge(x_test,  Growth_rate_sales_manag_expen_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Time_lag_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, Big_4_x_test, how='inner') \n",
    "x_test = pd.DataFrame.merge(x_test, IPO_time_x_test, how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "id": "87e5129e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2017)</th>\n",
       "      <th>company_code</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2017)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2017)</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>big4_conduct, 2017, no</th>\n",
       "      <th>big4_conduct, 2017, yes</th>\n",
       "      <th>big4_conduct, 2017, unknown</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.991758</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>688368.SH</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>2.289362</td>\n",
       "      <td>0.673208</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>1.155750</td>\n",
       "      <td>0.936616</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.570982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.830398</td>\n",
       "      <td>0.797923</td>\n",
       "      <td>1.201880</td>\n",
       "      <td>603015.SH</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>1.733034</td>\n",
       "      <td>1.274427</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.158953</td>\n",
       "      <td>0.861197</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.425312e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.344525</td>\n",
       "      <td>2.048955</td>\n",
       "      <td>300535.SZ</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.461140</td>\n",
       "      <td>0.931822</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>0.869091</td>\n",
       "      <td>0.895496</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.470931e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      1.991758   \n",
       "1                                      0.830398   \n",
       "2                                      1.233075   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2016)  \\\n",
       "0                                           NaN   \n",
       "1                                      0.797923   \n",
       "2                                      0.344525   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2017) company_code  \\\n",
       "0                                           NaN    688368.SH   \n",
       "1                                      1.201880    603015.SH   \n",
       "2                                      2.048955    300535.SZ   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                         0.854574   \n",
       "1                                         0.409493   \n",
       "2                                         0.659597   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                         2.289362   \n",
       "1                                         1.733034   \n",
       "2                                         0.461140   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2017)  \\\n",
       "0                                         0.673208   \n",
       "1                                         1.274427   \n",
       "2                                         0.931822   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           2.192573   \n",
       "1                                           1.047607   \n",
       "2                                           0.833449   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                           1.155750   \n",
       "1                                           1.158953   \n",
       "2                                           0.869091   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2017)  ...  \\\n",
       "0                                           0.936616  ...   \n",
       "1                                           0.861197  ...   \n",
       "2                                           0.895496  ...   \n",
       "\n",
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2015, unknown  big4_conduct, 2016, no  \\\n",
       "0                          1.0                     1.0   \n",
       "1                          0.0                     1.0   \n",
       "2                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2016, yes  big4_conduct, 2016, unknown  \\\n",
       "0                      0.0                          0.0   \n",
       "1                      0.0                          0.0   \n",
       "2                      0.0                          0.0   \n",
       "\n",
       "  big4_conduct, 2017, no  big4_conduct, 2017, yes  \\\n",
       "0                    1.0                      0.0   \n",
       "1                    1.0                      0.0   \n",
       "2                    1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2017, unknown      IPO_Time  \n",
       "0                          0.0  1.570982e+09  \n",
       "1                          0.0  1.425312e+09  \n",
       "2                          0.0  1.470931e+09  \n",
       "\n",
       "[3 rows x 44 columns]"
      ]
     },
     "execution_count": 490,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd7ce23e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train, validation, test dataset\n",
    "\n",
    "x_train\n",
    "y_train\n",
    "\n",
    "x_val\n",
    "y_val\n",
    "\n",
    "x_test\n",
    "y_test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "id": "ab690a18",
   "metadata": {},
   "outputs": [],
   "source": [
    "# imputer selection\n",
    "\n",
    "x_train= x_train.replace('--',np.nan)\n",
    "x_val= x_val.replace('--',np.nan)\n",
    "x_test= x_test.replace('--',np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "id": "e6f446e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# delete company_code \n",
    "\n",
    "x_train.drop('company_code' , axis=1 , inplace= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "id": "08caf5e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# change datatype to be float\n",
    "\n",
    "x_train = x_train.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "id": "2f3b7699",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Growth rate of sales revenue from year 2006 to 2018', 2013)</th>\n",
       "      <th>...</th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.570982e+09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.363352</td>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>1.072965</td>\n",
       "      <td>1.078930</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>0.936174</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.178044</td>\n",
       "      <td>...</td>\n",
       "      <td>1.425312e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.868412</td>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.881060</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.883832</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>1.122699</td>\n",
       "      <td>...</td>\n",
       "      <td>1.470931e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.855403</td>\n",
       "      <td>1.058791</td>\n",
       "      <td>1.784644</td>\n",
       "      <td>0.816112</td>\n",
       "      <td>1.013779</td>\n",
       "      <td>0.734240</td>\n",
       "      <td>0.857971</td>\n",
       "      <td>0.818659</td>\n",
       "      <td>0.872339</td>\n",
       "      <td>1.041260</td>\n",
       "      <td>...</td>\n",
       "      <td>1.497283e+09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.468661</td>\n",
       "      <td>1.635009</td>\n",
       "      <td>0.598725</td>\n",
       "      <td>0.871454</td>\n",
       "      <td>0.837348</td>\n",
       "      <td>0.690065</td>\n",
       "      <td>0.748173</td>\n",
       "      <td>0.804959</td>\n",
       "      <td>0.817627</td>\n",
       "      <td>1.050004</td>\n",
       "      <td>...</td>\n",
       "      <td>1.435507e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2495</th>\n",
       "      <td>0.956723</td>\n",
       "      <td>1.125944</td>\n",
       "      <td>1.049740</td>\n",
       "      <td>1.033728</td>\n",
       "      <td>0.954579</td>\n",
       "      <td>1.309247</td>\n",
       "      <td>2.223007</td>\n",
       "      <td>0.987368</td>\n",
       "      <td>0.867732</td>\n",
       "      <td>1.063740</td>\n",
       "      <td>...</td>\n",
       "      <td>6.615360e+08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2496</th>\n",
       "      <td>2.805197</td>\n",
       "      <td>0.950460</td>\n",
       "      <td>1.131726</td>\n",
       "      <td>1.244556</td>\n",
       "      <td>1.073412</td>\n",
       "      <td>1.235325</td>\n",
       "      <td>1.480419</td>\n",
       "      <td>0.884899</td>\n",
       "      <td>0.924845</td>\n",
       "      <td>1.456764</td>\n",
       "      <td>...</td>\n",
       "      <td>1.309277e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>5.028969</td>\n",
       "      <td>0.102198</td>\n",
       "      <td>38.113952</td>\n",
       "      <td>0.974423</td>\n",
       "      <td>1.413391</td>\n",
       "      <td>16.126125</td>\n",
       "      <td>0.930546</td>\n",
       "      <td>0.893893</td>\n",
       "      <td>0.805503</td>\n",
       "      <td>0.782222</td>\n",
       "      <td>...</td>\n",
       "      <td>1.300982e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>0.904183</td>\n",
       "      <td>1.242847</td>\n",
       "      <td>1.470212</td>\n",
       "      <td>0.666337</td>\n",
       "      <td>1.199694</td>\n",
       "      <td>1.379932</td>\n",
       "      <td>0.994625</td>\n",
       "      <td>0.925218</td>\n",
       "      <td>0.956824</td>\n",
       "      <td>1.351449</td>\n",
       "      <td>...</td>\n",
       "      <td>1.197907e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>0.333712</td>\n",
       "      <td>1.196529</td>\n",
       "      <td>1.936625</td>\n",
       "      <td>1.101229</td>\n",
       "      <td>1.312545</td>\n",
       "      <td>0.607280</td>\n",
       "      <td>1.087715</td>\n",
       "      <td>1.119700</td>\n",
       "      <td>1.319137</td>\n",
       "      <td>1.714566</td>\n",
       "      <td>...</td>\n",
       "      <td>1.302797e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2500 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ('Asset Index from year 2006 to 2018', 2013)  \\\n",
       "0                                              NaN   \n",
       "1                                         1.363352   \n",
       "2                                         0.868412   \n",
       "3                                         0.855403   \n",
       "4                                         1.468661   \n",
       "...                                            ...   \n",
       "2495                                      0.956723   \n",
       "2496                                      2.805197   \n",
       "2497                                      5.028969   \n",
       "2498                                      0.904183   \n",
       "2499                                      0.333712   \n",
       "\n",
       "      ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                              NaN   \n",
       "1                                         1.291652   \n",
       "2                                         1.165348   \n",
       "3                                         1.058791   \n",
       "4                                         1.635009   \n",
       "...                                            ...   \n",
       "2495                                      1.125944   \n",
       "2496                                      0.950460   \n",
       "2497                                      0.102198   \n",
       "2498                                      1.242847   \n",
       "2499                                      1.196529   \n",
       "\n",
       "      ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                         1.991758   \n",
       "1                                         0.830398   \n",
       "2                                         1.233075   \n",
       "3                                         1.784644   \n",
       "4                                         0.598725   \n",
       "...                                            ...   \n",
       "2495                                      1.049740   \n",
       "2496                                      1.131726   \n",
       "2497                                     38.113952   \n",
       "2498                                      1.470212   \n",
       "2499                                      1.936625   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                                 NaN   \n",
       "1                                            1.072965   \n",
       "2                                            0.881060   \n",
       "3                                            0.816112   \n",
       "4                                            0.871454   \n",
       "...                                               ...   \n",
       "2495                                         1.033728   \n",
       "2496                                         1.244556   \n",
       "2497                                         0.974423   \n",
       "2498                                         0.666337   \n",
       "2499                                         1.101229   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                                 NaN   \n",
       "1                                            1.078930   \n",
       "2                                            0.968049   \n",
       "3                                            1.013779   \n",
       "4                                            0.837348   \n",
       "...                                               ...   \n",
       "2495                                         0.954579   \n",
       "2496                                         1.073412   \n",
       "2497                                         1.413391   \n",
       "2498                                         1.199694   \n",
       "2499                                         1.312545   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                            0.854574   \n",
       "1                                            0.409493   \n",
       "2                                            0.659597   \n",
       "3                                            0.734240   \n",
       "4                                            0.690065   \n",
       "...                                               ...   \n",
       "2495                                         1.309247   \n",
       "2496                                         1.235325   \n",
       "2497                                        16.126125   \n",
       "2498                                         1.379932   \n",
       "2499                                         0.607280   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                                   NaN   \n",
       "1                                              0.936174   \n",
       "2                                              0.883832   \n",
       "3                                              0.857971   \n",
       "4                                              0.748173   \n",
       "...                                                 ...   \n",
       "2495                                           2.223007   \n",
       "2496                                           1.480419   \n",
       "2497                                           0.930546   \n",
       "2498                                           0.994625   \n",
       "2499                                           1.087715   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                              0.972920   \n",
       "1                                              0.907508   \n",
       "2                                              0.908002   \n",
       "3                                              0.818659   \n",
       "4                                              0.804959   \n",
       "...                                                 ...   \n",
       "2495                                           0.987368   \n",
       "2496                                           0.884899   \n",
       "2497                                           0.893893   \n",
       "2498                                           0.925218   \n",
       "2499                                           1.119700   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                              2.192573   \n",
       "1                                              1.047607   \n",
       "2                                              0.833449   \n",
       "3                                              0.872339   \n",
       "4                                              0.817627   \n",
       "...                                                 ...   \n",
       "2495                                           0.867732   \n",
       "2496                                           0.924845   \n",
       "2497                                           0.805503   \n",
       "2498                                           0.956824   \n",
       "2499                                           1.319137   \n",
       "\n",
       "      ('Growth rate of sales revenue from year 2006 to 2018', 2013)  ...  \\\n",
       "0                                                   NaN              ...   \n",
       "1                                              1.178044              ...   \n",
       "2                                              1.122699              ...   \n",
       "3                                              1.041260              ...   \n",
       "4                                              1.050004              ...   \n",
       "...                                                 ...              ...   \n",
       "2495                                           1.063740              ...   \n",
       "2496                                           1.456764              ...   \n",
       "2497                                           0.782222              ...   \n",
       "2498                                           1.351449              ...   \n",
       "2499                                           1.714566              ...   \n",
       "\n",
       "          IPO_Time  big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0     1.570982e+09                     0.0                      0.0   \n",
       "1     1.425312e+09                     1.0                      0.0   \n",
       "2     1.470931e+09                     1.0                      0.0   \n",
       "3     1.497283e+09                     0.0                      0.0   \n",
       "4     1.435507e+09                     1.0                      0.0   \n",
       "...            ...                     ...                      ...   \n",
       "2495  6.615360e+08                     1.0                      0.0   \n",
       "2496  1.309277e+09                     1.0                      0.0   \n",
       "2497  1.300982e+09                     1.0                      0.0   \n",
       "2498  1.197907e+09                     1.0                      0.0   \n",
       "2499  1.302797e+09                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                             1.0                     0.0   \n",
       "1                             0.0                     1.0   \n",
       "2                             0.0                     1.0   \n",
       "3                             1.0                     1.0   \n",
       "4                             0.0                     1.0   \n",
       "...                           ...                     ...   \n",
       "2495                          0.0                     1.0   \n",
       "2496                          0.0                     1.0   \n",
       "2497                          0.0                     1.0   \n",
       "2498                          0.0                     1.0   \n",
       "2499                          0.0                     1.0   \n",
       "\n",
       "      big4_conduct, 2014, yes  big4_conduct, 2014, unknown  \\\n",
       "0                         0.0                          1.0   \n",
       "1                         0.0                          0.0   \n",
       "2                         0.0                          0.0   \n",
       "3                         0.0                          0.0   \n",
       "4                         0.0                          0.0   \n",
       "...                       ...                          ...   \n",
       "2495                      0.0                          0.0   \n",
       "2496                      0.0                          0.0   \n",
       "2497                      0.0                          0.0   \n",
       "2498                      0.0                          0.0   \n",
       "2499                      0.0                          0.0   \n",
       "\n",
       "      big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0                        0.0                      0.0   \n",
       "1                        1.0                      0.0   \n",
       "2                        1.0                      0.0   \n",
       "3                        1.0                      0.0   \n",
       "4                        1.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     1.0                      0.0   \n",
       "2497                     1.0                      0.0   \n",
       "2498                     1.0                      0.0   \n",
       "2499                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2015, unknown  \n",
       "0                             1.0  \n",
       "1                             0.0  \n",
       "2                             0.0  \n",
       "3                             0.0  \n",
       "4                             0.0  \n",
       "...                           ...  \n",
       "2495                          0.0  \n",
       "2496                          0.0  \n",
       "2497                          0.0  \n",
       "2498                          0.0  \n",
       "2499                          0.0  \n",
       "\n",
       "[2500 rows x 43 columns]"
      ]
     },
     "execution_count": 549,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "id": "8bb3d245",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# use knn imputer \n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "X=  x_train\n",
    "y=  y_train\n",
    "\n",
    "imputer = KNNImputer(n_neighbors=6, weights=\"uniform\") \n",
    "\n",
    "pipe_dummy = Pipeline(steps=[('impute',imputer), ('predictor',DummyClassifier())])\n",
    "pipe_knn = Pipeline(steps=[('impute',imputer), ('predictor',KNeighborsClassifier(n_neighbors = 9,p = 1))])\n",
    "pipe_rf= Pipeline(steps=[('impute',imputer), ('predictor', RandomForestClassifier(random_state=42))])\n",
    "pipe_ada = Pipeline(steps=[('impute',imputer), ('predictor',AdaBoostClassifier(learning_rate=3.0))])\n",
    "pipe_tree = Pipeline(steps=[('impute',imputer), ('predictor',DecisionTreeClassifier())])\n",
    "\n",
    "\n",
    "folds = KFold(n_splits=10, shuffle=True, random_state=0)\n",
    "\n",
    "recall_dummy = np.mean( cross_val_score(pipe_dummy, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_knn = np.mean( cross_val_score(pipe_knn, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_rf = np.mean( cross_val_score(pipe_rf, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_ada = np.mean( cross_val_score(pipe_ada, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_tree = np.mean( cross_val_score(pipe_tree, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "acc_dummy = np.mean( cross_val_score(pipe_dummy, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_knn = np.mean( cross_val_score(pipe_knn, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_rf = np.mean( cross_val_score(pipe_rf, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_ada = np.mean( cross_val_score(pipe_ada, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_tree = np.mean( cross_val_score(pipe_tree, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n",
    "\n",
    "\n",
    "pipe_knn_standardized = Pipeline(steps=[('impute',imputer),('prep',StandardScaler()), ('predictor', KNeighborsClassifier(n_neighbors = 6,p = 1))])\n",
    "recall_knn_standard = -np.mean( cross_val_score(pipe_knn_standardized, X, y, scoring = 'neg_mean_absolute_error', cv=folds) )\n",
    "\n",
    "pipe_rf_standardized = Pipeline(steps=[('impute',imputer),('prep',StandardScaler()), ('predictor', RandomForestClassifier())])\n",
    "recall_rf_standard = -np.mean( cross_val_score(pipe_rf_standardized , X, y, scoring = 'neg_mean_absolute_error', cv=folds) )\n",
    "\n",
    "pipe_ada_standardized = Pipeline(steps=[('impute',imputer),('prep',StandardScaler()), ('predictor',AdaBoostClassifier(learning_rate=3.0))])\n",
    "recall_ada_standard = -np.mean( cross_val_score(pipe_ada_standardized , X, y, scoring = 'neg_mean_absolute_error', cv=folds) )\n",
    "\n",
    "pipe_tree_standardized = Pipeline(steps=[('impute',imputer),('prep',StandardScaler()), ('predictor',DecisionTreeClassifier())])\n",
    "recall_tree_standard = -np.mean( cross_val_score(pipe_tree_standardized , X, y, scoring = 'neg_mean_absolute_error', cv=folds) )\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "id": "b763610a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "recall_dummy = np.mean( cross_val_score(pipe_dummy, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_knn = np.mean( cross_val_score(pipe_knn, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_rf = np.mean( cross_val_score(pipe_rf, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_ada = np.mean( cross_val_score(pipe_ada, X, y, scoring = 'recall', cv=folds) )\n",
    "recall_tree = np.mean( cross_val_score(pipe_tree, X, y, scoring = 'recall', cv=folds) )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "id": "e2d0027b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             before standardization\n",
      "dummy recall: 0.0,  acc: 0.9712\n",
      "knn   recall: 0.0, acc: 0.9712\n",
      "Rf    recall: 0.0, acc: 0.9712\n",
      "Ada   recall: 0.9777777777777779, acc: 0.24359999999999998\n",
      "tree  recall: 0.01944444444444444,acc: 0.9372\n",
      "             after standardization\n",
      "knn  standardized recall: 0.0288\n",
      "rf   standardized recall: 0.0288\n",
      "ada  standardized recall: 0.758\n",
      "tree standardized recall: 0.0644\n"
     ]
    }
   ],
   "source": [
    "print('             before standardization')\n",
    "print('dummy recall: {},  acc: {}'.format((recall_dummy),(acc_dummy)) )\n",
    "print('knn   recall: {}, acc: {}'.format((recall_knn),(acc_knn)) )\n",
    "print('Rf    recall: {}, acc: {}'.format((recall_rf),(acc_rf)) )\n",
    "print('Ada   recall: {}, acc: {}'.format((recall_ada),(acc_ada)) )\n",
    "print('tree  recall: {},acc: {}'.format((recall_tree),(acc_tree)) )\n",
    "\n",
    "print('             after standardization')\n",
    "print('knn  standardized recall: {}'.format(recall_knn_standard))\n",
    "print('rf   standardized recall: {}'.format(recall_rf_standard ))  \n",
    "print('ada  standardized recall: {}'.format(recall_ada_standard ))\n",
    "print('tree standardized recall: {}'.format(recall_tree_standard))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "825599f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knnimputer: highest score- ada  standardized recall: 0.758"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "id": "62467a0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# the second imputer-- IterativeImputer\n",
    "\n",
    "from sklearn.experimental import enable_iterative_imputer\n",
    "from sklearn.impute import IterativeImputer\n",
    "\n",
    "X=  x_train \n",
    "y=  y_train\n",
    "\n",
    "imputer_it_x_2 = IterativeImputer( max_iter=8, random_state=42) \n",
    "\n",
    "folds = KFold(n_splits=8, shuffle=True, random_state=0)\n",
    "\n",
    "pipe_dummy_imputer_it_x_2 = Pipeline(steps=[('impute',imputer_it_x_2), ('predictor',DummyClassifier())])\n",
    "recall_dummy_imputer_it_x_2 = np.mean( cross_val_score(pipe_dummy_imputer_it_x_2, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "pipe_knn_imputer_it_x_2 = Pipeline(steps=[('impute',imputer_it_x_2), ('predictor',KNeighborsClassifier(n_neighbors = 3,p = 1))])\n",
    "recall_knn_imputer_it_x_2 = np.mean( cross_val_score(pipe_knn_imputer_it_x_2, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_rf_imputer_it_x_2= Pipeline(steps=[('impute',imputer_it_x_2), ('predictor', RandomForestClassifier(random_state=42))])\n",
    "recall_rf_imputer_it_x_2 = np.mean( cross_val_score(pipe_rf_imputer_it_x_2, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_ada_imputer_it_x_2 = Pipeline(steps=[('impute',imputer_it_x_2), ('predictor',AdaBoostClassifier(learning_rate=0.05))])\n",
    "recall_ada_imputer_it_x_2 = np.mean( cross_val_score(pipe_ada_imputer_it_x_2, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_tree_it_x_2 = Pipeline(steps=[('impute',imputer), ('predictor',DecisionTreeClassifier())])\n",
    "recall_tree_it_x_2 = np.mean( cross_val_score(pipe_tree_it_x_2, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "pipe_knn_standardized = Pipeline(steps=[('impute',imputer_it_x_2),('prep',StandardScaler()), ('predictor', KNeighborsClassifier(n_neighbors = 6,p = 1))])\n",
    "recall_knn_standard = np.mean( cross_val_score(pipe_knn_standardized, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_rf_standardized = Pipeline(steps=[('impute',imputer_it_x_2),('prep',StandardScaler()), ('predictor', RandomForestClassifier())])\n",
    "recall_rf_standard = np.mean( cross_val_score(pipe_rf_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_ada_standardized = Pipeline(steps=[('impute',imputer_it_x_2),('prep',StandardScaler()), ('predictor',AdaBoostClassifier(learning_rate=3.0))])\n",
    "recall_ada_standard = np.mean( cross_val_score(pipe_ada_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_tree_standardized = Pipeline(steps=[('impute',imputer_it_x_2),('prep',StandardScaler()), ('predictor',DecisionTreeClassifier())])\n",
    "recall_tree_standard = np.mean( cross_val_score(pipe_tree_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "id": "f9e1fb90",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "acc_dummy_imputer_it_x_2 = np.mean( cross_val_score(pipe_dummy_imputer_it_x_2, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_knn_imputer_it_x_2 = np.mean( cross_val_score(pipe_knn_imputer_it_x_2, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_rf_imputer_it_x_2 = np.mean( cross_val_score(pipe_rf_imputer_it_x_2, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_ada_imputer_it_x_2 = np.mean( cross_val_score(pipe_ada_imputer_it_x_2, X, y, scoring = 'accuracy', cv=folds) )\n",
    "acc_tree_it_x_2 = np.mean( cross_val_score(pipe_tree_it_x_2, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "id": "0043fb85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             before standardization\n",
      "dummy recall: 0.0,  acc: 0.9711935262554272\n",
      "knn   recall: 0.0,  acc: 0.9671909560088474\n",
      "Rf    recall: 0.0,  acc: 0.9711935262554272\n",
      "Ada   recall: 0.0,  acc: 0.9711935262554272\n",
      "tree   recall: 0.0936431623931624,  acc: 0.932396626935365\n",
      "             after standardization\n",
      "knn  standardized recall: 0.0\n",
      "rf   standardized recall: 0.0\n",
      "ada  standardized recall: 0.9370192307692308\n",
      "tree standardized recall: 0.08741987179487179\n"
     ]
    }
   ],
   "source": [
    "print('             before standardization')\n",
    "\n",
    "\n",
    "print('dummy recall: {},  acc: {}'.format((recall_dummy_imputer_it_x_2),(acc_dummy_imputer_it_x_2)))\n",
    "print('knn   recall: {},  acc: {}'.format((recall_knn_imputer_it_x_2),(acc_knn_imputer_it_x_2)) )\n",
    "print('Rf    recall: {},  acc: {}'.format((recall_rf_imputer_it_x_2),(acc_rf_imputer_it_x_2)) )\n",
    "print('Ada   recall: {},  acc: {}'.format((recall_ada_imputer_it_x_2),(acc_ada_imputer_it_x_2)) )\n",
    "print('tree   recall: {},  acc: {}'.format((recall_tree_it_x_2),(acc_tree_it_x_2)))\n",
    "\n",
    "print('             after standardization')\n",
    "print('knn  standardized recall: {}'.format(recall_knn_standard))\n",
    "print('rf   standardized recall: {}'.format(recall_rf_standard ))  \n",
    "print('ada  standardized recall: {}'.format(recall_ada_standard ))\n",
    "print('tree standardized recall: {}'.format(recall_tree_standard))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79ab67f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knnimputer: highest score- ada  standardized recall: 0.9777, acc: 0.97119\n",
    "# IterativeImputer: highest score- ada  standardized recall: 0.937019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52ecf0ae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "id": "40ee7d4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# try another imputer -- SimpleImputer\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "imputer_3= SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "\n",
    "\n",
    "folds = KFold(n_splits=10, shuffle=True, random_state=0)\n",
    "\n",
    "pipe_dummy_3 = Pipeline(steps=[('impute',imputer_3), ('predictor',DummyClassifier())])\n",
    "recall_dummy_3 = np.mean( cross_val_score(pipe_dummy_3, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "pipe_knn_3 = Pipeline(steps=[('impute',imputer_3), ('predictor',KNeighborsClassifier(n_neighbors = 6,p = 1))])\n",
    "recall_knn_3 = np.mean( cross_val_score(pipe_knn_3, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_rf_3= Pipeline(steps=[('impute',imputer_3), ('predictor', RandomForestClassifier(random_state=42))])\n",
    "recall_rf_3 = np.mean( cross_val_score(pipe_rf_3, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_ada_3 = Pipeline(steps=[('impute',imputer_3), ('predictor',AdaBoostClassifier(learning_rate=0.05))])\n",
    "recall_ada_3 = np.mean( cross_val_score(pipe_ada_3, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "pipe_tree_3 = Pipeline(steps=[('impute',imputer), ('predictor',DecisionTreeClassifier())])\n",
    "recall_tree_3 = np.mean( cross_val_score(pipe_tree_3, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n",
    "pipe_knn_standardized = Pipeline(steps=[('impute',imputer_3),('prep',StandardScaler()), ('predictor', KNeighborsClassifier(n_neighbors = 6,p = 1))])\n",
    "recall_knn_standard = np.mean( cross_val_score(pipe_knn_standardized, X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_rf_standardized = Pipeline(steps=[('impute',imputer_3),('prep',StandardScaler()), ('predictor', RandomForestClassifier())])\n",
    "recall_rf_standard = np.mean( cross_val_score(pipe_rf_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_ada_standardized = Pipeline(steps=[('impute',imputer_3),('prep',StandardScaler()), ('predictor',AdaBoostClassifier(learning_rate=3.0))])\n",
    "recall_ada_standard = np.mean( cross_val_score(pipe_ada_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "pipe_tree_standardized = Pipeline(steps=[('impute',imputer_3),('prep',StandardScaler()), ('predictor',DecisionTreeClassifier())])\n",
    "recall_tree_standard = np.mean( cross_val_score(pipe_tree_standardized , X, y, scoring = 'recall', cv=folds) )\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "id": "e37ce073",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_dummy_3 = np.mean( cross_val_score(pipe_dummy_3, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n",
    "acc_knn_3 = np.mean( cross_val_score(pipe_knn_3, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n",
    "acc_rf_3 = np.mean( cross_val_score(pipe_rf_3, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n",
    "acc_ada_3 = np.mean( cross_val_score(pipe_ada_3, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n",
    "acc_tree_3 = np.mean( cross_val_score(pipe_tree_3, X, y, scoring = 'accuracy', cv=folds) )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "id": "975b2173",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             before standardization\n",
      "dummy recall: 0.0, acc: 0.9712\n",
      "knn   recall: 0.0, acc: 0.9712\n",
      "Rf    recall: 0.0, acc: 0.9712\n",
      "Ada   recall: 0.0, acc: 0.9712\n",
      "tree  recall: 0.04444444444444444, acc: 0.9332\n",
      "             after standardization\n",
      "knn standardized  recall: 0.0\n",
      "rf standardized   recall: 0.0\n",
      "ada standardized  recall: 0.9370192307692308\n",
      "tree standardized recall: 0.08741987179487179\n"
     ]
    }
   ],
   "source": [
    "print('             before standardization')\n",
    "print('dummy recall: {}, acc: {}'.format((recall_dummy_3),(acc_dummy_3) ))\n",
    "print('knn   recall: {}, acc: {}'.format((recall_knn_3), (acc_knn_3)))\n",
    "print('Rf    recall: {}, acc: {}'.format((recall_rf_3), (acc_rf_3)))\n",
    "print('Ada   recall: {}, acc: {}'.format((recall_ada_3), (acc_ada_3))) \n",
    "print('tree  recall: {}, acc: {}'.format((recall_tree_3), (acc_tree_3))) \n",
    "\n",
    "print('             after standardization')\n",
    "print('knn standardized  recall: {}'.format(recall_knn_standard))\n",
    "print('rf standardized   recall: {}'.format(recall_rf_standard ))  \n",
    "print('ada standardized  recall: {}'.format(recall_ada_standard ))\n",
    "print('tree standardized recall: {}'.format(recall_tree_standard))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99d4af04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knnimputer:       highest score - ada  standardized recall: 0.9777\n",
    "# IterativeImputer: highest score - ada  standardized recall: 0.937019\n",
    "# SimpleImputer:     highest score- ada  standardized recall: 0.93701"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "288cff09",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Result: Knn imputer is selected to fill null value. \n",
    "# because it can learn non-linear decision boundaries when used for classfication\n",
    "# mean imputation is the fact that it tends to produce bias estimates for some parameters, particularly for the variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "id": "01248cbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "imputer_best = KNNImputer(n_neighbors=6, weights=\"uniform\") \n",
    "\n",
    "X_imputed_train = imputer_best.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "id": "633751e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_imputed_train= pd.DataFrame(X_imputed_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "id": "72cc4fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_imputed_train.columns= x_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "id": "556cdd86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Growth rate of sales revenue from year 2006 to 2018', 2013)</th>\n",
       "      <th>...</th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.735580</td>\n",
       "      <td>1.290492</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>1.004529</td>\n",
       "      <td>1.094669</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>1.118086</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>1.220529</td>\n",
       "      <td>...</td>\n",
       "      <td>1.570982e+09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.363352</td>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>1.072965</td>\n",
       "      <td>1.078930</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>0.936174</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.178044</td>\n",
       "      <td>...</td>\n",
       "      <td>1.425312e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.868412</td>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.881060</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.883832</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>1.122699</td>\n",
       "      <td>...</td>\n",
       "      <td>1.470931e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.855403</td>\n",
       "      <td>1.058791</td>\n",
       "      <td>1.784644</td>\n",
       "      <td>0.816112</td>\n",
       "      <td>1.013779</td>\n",
       "      <td>0.734240</td>\n",
       "      <td>0.857971</td>\n",
       "      <td>0.818659</td>\n",
       "      <td>0.872339</td>\n",
       "      <td>1.041260</td>\n",
       "      <td>...</td>\n",
       "      <td>1.497283e+09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.468661</td>\n",
       "      <td>1.635009</td>\n",
       "      <td>0.598725</td>\n",
       "      <td>0.871454</td>\n",
       "      <td>0.837348</td>\n",
       "      <td>0.690065</td>\n",
       "      <td>0.748173</td>\n",
       "      <td>0.804959</td>\n",
       "      <td>0.817627</td>\n",
       "      <td>1.050004</td>\n",
       "      <td>...</td>\n",
       "      <td>1.435507e+09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2013)  \\\n",
       "0                                      0.735580   \n",
       "1                                      1.363352   \n",
       "2                                      0.868412   \n",
       "3                                      0.855403   \n",
       "4                                      1.468661   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                      1.290492   \n",
       "1                                      1.291652   \n",
       "2                                      1.165348   \n",
       "3                                      1.058791   \n",
       "4                                      1.635009   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      1.991758   \n",
       "1                                      0.830398   \n",
       "2                                      1.233075   \n",
       "3                                      1.784644   \n",
       "4                                      0.598725   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                         1.004529   \n",
       "1                                         1.072965   \n",
       "2                                         0.881060   \n",
       "3                                         0.816112   \n",
       "4                                         0.871454   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                         1.094669   \n",
       "1                                         1.078930   \n",
       "2                                         0.968049   \n",
       "3                                         1.013779   \n",
       "4                                         0.837348   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                         0.854574   \n",
       "1                                         0.409493   \n",
       "2                                         0.659597   \n",
       "3                                         0.734240   \n",
       "4                                         0.690065   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                           1.118086   \n",
       "1                                           0.936174   \n",
       "2                                           0.883832   \n",
       "3                                           0.857971   \n",
       "4                                           0.748173   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.972920   \n",
       "1                                           0.907508   \n",
       "2                                           0.908002   \n",
       "3                                           0.818659   \n",
       "4                                           0.804959   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           2.192573   \n",
       "1                                           1.047607   \n",
       "2                                           0.833449   \n",
       "3                                           0.872339   \n",
       "4                                           0.817627   \n",
       "\n",
       "   ('Growth rate of sales revenue from year 2006 to 2018', 2013)  ...  \\\n",
       "0                                           1.220529              ...   \n",
       "1                                           1.178044              ...   \n",
       "2                                           1.122699              ...   \n",
       "3                                           1.041260              ...   \n",
       "4                                           1.050004              ...   \n",
       "\n",
       "       IPO_Time  big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0  1.570982e+09                     0.0                      0.0   \n",
       "1  1.425312e+09                     1.0                      0.0   \n",
       "2  1.470931e+09                     1.0                      0.0   \n",
       "3  1.497283e+09                     0.0                      0.0   \n",
       "4  1.435507e+09                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "2                          0.0                     1.0   \n",
       "3                          1.0                     1.0   \n",
       "4                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2014, yes  big4_conduct, 2014, unknown  \\\n",
       "0                      0.0                          1.0   \n",
       "1                      0.0                          0.0   \n",
       "2                      0.0                          0.0   \n",
       "3                      0.0                          0.0   \n",
       "4                      0.0                          0.0   \n",
       "\n",
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "3                     1.0                      0.0   \n",
       "4                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2015, unknown  \n",
       "0                          1.0  \n",
       "1                          0.0  \n",
       "2                          0.0  \n",
       "3                          0.0  \n",
       "4                          0.0  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_imputed_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "id": "00328ba8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2428\n",
       "1      72\n",
       "Name: y_train_2016, dtype: int64"
      ]
     },
     "execution_count": 504,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "id": "44ea4da1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# over-sampling (smote)\n",
    "\n",
    "# deal with unbalanced data (over sampling).\n",
    "# under sampling is not considered like Ensemble Techniques, because it delete data. \n",
    "\n",
    "from imblearn.combine import SMOTETomek\n",
    "smote= SMOTETomek(random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "id": "9e0fa3a7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of classes before fit {0: 2428, 1: 72}\n",
      "The number of classes after fit {0: 2157, 1: 2157}\n"
     ]
    }
   ],
   "source": [
    "x_train_sm, y_train_sm= smote.fit_resample(X_imputed_train, y_train)\n",
    "print(\"The number of classes before fit {}\".format(y_train.value_counts().to_dict()))\n",
    "print(\"The number of classes after fit {}\".format(y_train_sm.value_counts().to_dict()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3d45272",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "id": "25fbd6d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardide data\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "x_train_ss= x_train_sm.copy()\n",
    "\n",
    "ss = StandardScaler()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "id": "48149719",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_ss= ss.fit_transform(x_train_ss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "id": "cef8e534",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_ss= pd.DataFrame(x_train_ss)\n",
    "\n",
    "x_train_ss.columns= x_train_sm.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "id": "310b211c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2013)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Growth rate of sales revenue from year 2006 to 2018', 2013)</th>\n",
       "      <th>...</th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.049557</td>\n",
       "      <td>-0.019369</td>\n",
       "      <td>0.184539</td>\n",
       "      <td>-0.255835</td>\n",
       "      <td>0.127367</td>\n",
       "      <td>-0.397766</td>\n",
       "      <td>0.037418</td>\n",
       "      <td>0.062701</td>\n",
       "      <td>0.106719</td>\n",
       "      <td>-0.006551</td>\n",
       "      <td>...</td>\n",
       "      <td>1.504263</td>\n",
       "      <td>-2.608196</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>3.014019</td>\n",
       "      <td>-3.526067</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>4.711003</td>\n",
       "      <td>-3.562863</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>5.480508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.042755</td>\n",
       "      <td>-0.114353</td>\n",
       "      <td>-0.132730</td>\n",
       "      <td>-0.533618</td>\n",
       "      <td>-0.272621</td>\n",
       "      <td>-0.759276</td>\n",
       "      <td>-0.024805</td>\n",
       "      <td>0.044058</td>\n",
       "      <td>-0.111517</td>\n",
       "      <td>-0.060586</td>\n",
       "      <td>...</td>\n",
       "      <td>1.104734</td>\n",
       "      <td>0.400732</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>-0.336642</td>\n",
       "      <td>0.298898</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>-0.212269</td>\n",
       "      <td>0.308322</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>-0.182465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.043421</td>\n",
       "      <td>-0.195229</td>\n",
       "      <td>0.097928</td>\n",
       "      <td>-0.679739</td>\n",
       "      <td>-0.128162</td>\n",
       "      <td>-0.620880</td>\n",
       "      <td>-0.031674</td>\n",
       "      <td>0.018402</td>\n",
       "      <td>-0.105273</td>\n",
       "      <td>-0.105568</td>\n",
       "      <td>...</td>\n",
       "      <td>1.209964</td>\n",
       "      <td>-2.608196</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>3.014019</td>\n",
       "      <td>0.298898</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>-0.212269</td>\n",
       "      <td>0.308322</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>-0.182465</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2013)  \\\n",
       "0                                     -0.049557   \n",
       "1                                     -0.042755   \n",
       "2                                     -0.043421   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                     -0.019369   \n",
       "1                                     -0.114353   \n",
       "2                                     -0.195229   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      0.184539   \n",
       "1                                     -0.132730   \n",
       "2                                      0.097928   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                        -0.255835   \n",
       "1                                        -0.533618   \n",
       "2                                        -0.679739   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                         0.127367   \n",
       "1                                        -0.272621   \n",
       "2                                        -0.128162   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                        -0.397766   \n",
       "1                                        -0.759276   \n",
       "2                                        -0.620880   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2013)  \\\n",
       "0                                           0.037418   \n",
       "1                                          -0.024805   \n",
       "2                                          -0.031674   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.062701   \n",
       "1                                           0.044058   \n",
       "2                                           0.018402   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           0.106719   \n",
       "1                                          -0.111517   \n",
       "2                                          -0.105273   \n",
       "\n",
       "   ('Growth rate of sales revenue from year 2006 to 2018', 2013)  ...  \\\n",
       "0                                          -0.006551              ...   \n",
       "1                                          -0.060586              ...   \n",
       "2                                          -0.105568              ...   \n",
       "\n",
       "   IPO_Time  big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0  1.504263               -2.608196                -0.195643   \n",
       "1  1.104734                0.400732                -0.195643   \n",
       "2  1.209964               -2.608196                -0.195643   \n",
       "\n",
       "   big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                     3.014019               -3.526067   \n",
       "1                    -0.336642                0.298898   \n",
       "2                     3.014019                0.298898   \n",
       "\n",
       "   big4_conduct, 2014, yes  big4_conduct, 2014, unknown  \\\n",
       "0                 -0.20185                     4.711003   \n",
       "1                 -0.20185                    -0.212269   \n",
       "2                 -0.20185                    -0.212269   \n",
       "\n",
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0               -3.562863                -0.241379   \n",
       "1                0.308322                -0.241379   \n",
       "2                0.308322                -0.241379   \n",
       "\n",
       "   big4_conduct, 2015, unknown  \n",
       "0                     5.480508  \n",
       "1                    -0.182465  \n",
       "2                    -0.182465  \n",
       "\n",
       "[3 rows x 43 columns]"
      ]
     },
     "execution_count": 510,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_ss.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb1d563c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "debad6b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  after standization, x_train_ss\n",
    "#  y_train_sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "id": "9f6081b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature importance\n",
    "\n",
    "from sklearn.inspection import permutation_importance\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf_perm = RandomForestClassifier()\n",
    "rf_perm.fit(x_train_ss, y_train_sm)\n",
    "perm = permutation_importance(rf_perm, x_train_ss, y_train_sm, n_repeats=2, random_state=0 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "id": "5c579a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_variable_importances( feature_names, dict_in, show_top = 10 ):\n",
    "    \n",
    "  if show_top is None:\n",
    "    show_top = len(feature_names)\n",
    "  \n",
    "  to_print_titles = []\n",
    "  to_print_scores = []\n",
    "  \n",
    "  for k, v in dict_in.items():\n",
    "    \n",
    "    feature_names_plus_scores = sorted( zip(v, feature_names) )\n",
    "    feature_names_plus_scores.reverse()\n",
    "    to_print_titles.append(k)\n",
    "    to_print_scores.append(feature_names_plus_scores)\n",
    "    \n",
    "    \n",
    "  # Print the scores\n",
    "  \n",
    "  line_parts = []\n",
    "  for j in range(len(to_print_titles)):\n",
    "    line_parts.append('{:<38}'.format(to_print_titles[j]))\n",
    "  \n",
    "  print('Rank | ' + ' | '.join( ['{:<38}'.format(x) for x in to_print_titles] ) ) \n",
    "  print('---- + ' + ' + '.join( [ '-'*38 ]*len(to_print_titles) ) ) \n",
    "  for i in range(show_top):  \n",
    "    line_parts = []\n",
    "    for j in range(len(to_print_titles)):\n",
    "      line_parts.append(  '{:<30}: {:.4f}'.format(to_print_scores[j][i][1], to_print_scores[j][i][0]) )\n",
    "   \n",
    "    print( '{:<4} | '.format(str(i)) + ' | '.join(line_parts) )\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "id": "8e04299d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rank | Perm RF                               \n",
      "---- + --------------------------------------\n",
      "0    | IPO_Time                      : 0.0592\n",
      "1    | ('Leverage Ratio from year 2006 to 2018', 2013): 0.0245\n",
      "2    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013): 0.0127\n",
      "3    | ('Inventory Growth Rate from 2006 to 2018', 2015): 0.0090\n",
      "4    | ('Change rate of receivable turnover from 2006 to 2018', 2015): 0.0085\n",
      "5    | ('Growth rate of accounts receivable from 2006 to 2018', 2015): 0.0072\n",
      "6    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014): 0.0053\n",
      "7    | ('Net Profit Ratio from year 2006 to 2018', 2013): 0.0027\n",
      "8    | ('Asset Index from year 2006 to 2018', 2015): 0.0025\n",
      "9    | ('Net Profit Ratio from year 2006 to 2018', 2015): 0.0009\n"
     ]
    }
   ],
   "source": [
    "# Result: (Permuation-rf) TOP 10 most important features\n",
    "\n",
    "feature_importance_scores = {}\n",
    "\n",
    "feature_importance_scores['Perm RF'] = perm.importances_mean\n",
    "\n",
    "print_variable_importances(x_train_ss.columns, feature_importance_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f3648bf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "id": "1a635e70",
   "metadata": {},
   "outputs": [],
   "source": [
    "# RFE--find an optimal subset of features that are more relatively independent (remove masked feature)\n",
    "\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "selector = RFE(RandomForestClassifier(), n_features_to_select=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "id": "e6ba5376",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "\n",
    "selector.fit(x_train_ss, y_train_sm)\n",
    "print(selector.n_features_)\n",
    "\n",
    "\n",
    "method_name = 'RFE RF '\n",
    "feature_importance_scores = {}\n",
    "feature_importance_scores[method_name] = selector.estimator_.feature_importances_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "id": "9ad8ed03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rank | RFE RF                                \n",
      "---- + --------------------------------------\n",
      "0    | IPO_Time                      : 0.1598\n",
      "1    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014): 0.1143\n",
      "2    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013): 0.1118\n",
      "3    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2015): 0.0952\n",
      "4    | ('Leverage Ratio from year 2006 to 2018', 2013): 0.0919\n",
      "5    | ('Turnover of total assets from year 2006 to 2018', 2013): 0.0916\n",
      "6    | ('Inventory Growth Rate from 2006 to 2018', 2015): 0.0892\n",
      "7    | ('Growth rate of accounts receivable from 2006 to 2018', 2015): 0.0884\n",
      "8    | ('Net operating cash flow / Net profit from year 2006 to 2018', 2014): 0.0792\n",
      "9    | ('Net Profit Ratio from year 2006 to 2018', 2013): 0.0787\n"
     ]
    }
   ],
   "source": [
    "print_variable_importances( x_train_ss.columns[selector.support_], feature_importance_scores )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "0ee4362c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rank | Perm RF                               \n",
      "---- + --------------------------------------\n",
      "0    | IPO_Time                      : 0.0592\n",
      "1    | ('Leverage Ratio from year 2006 to 2018', 2013): 0.0245\n",
      "2    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013): 0.0127\n",
      "3    | ('Inventory Growth Rate from 2006 to 2018', 2015): 0.0090\n",
      "4    | ('Change rate of receivable turnover from 2006 to 2018', 2015): 0.0085\n",
      "5    | ('Growth rate of accounts receivable from 2006 to 2018', 2015): 0.0072\n",
      "6    | ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014): 0.0053\n",
      "7    | ('Net Profit Ratio from year 2006 to 2018', 2013): 0.0027\n",
      "8    | ('Asset Index from year 2006 to 2018', 2015): 0.0025\n",
      "9    | ('Net Profit Ratio from year 2006 to 2018', 2015): 0.0009\n"
     ]
    }
   ],
   "source": [
    "# Result: (Permuation-rf) TOP 10 most important features\n",
    "\n",
    "feature_importance_scores = {}\n",
    "\n",
    "feature_importance_scores['Perm RF'] = perm.importances_mean\n",
    "\n",
    "print_variable_importances(x_train_ss.columns, feature_importance_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "097c791c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# overlap features:\n",
    "                    \n",
    "1 IPO_Time \n",
    "2 ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2014)\n",
    "3 ('Time lag of annual report disclosure (days) from year 2006 to 2018', 2013)\n",
    "4 ('Leverage Ratio from year 2006 to 2018', 2013)\n",
    "5 ('Inventory Growth Rate from 2006 to 2018', 2015)\n",
    "6 ('Growth rate of accounts receivable from 2006 to 2018', 2015)\n",
    "7 ('Net Profit Ratio from year 2006 to 2018', 2013)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2176d76d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "714d08ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_ss\n",
    "y_train_sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "id": "df682fa7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# these 8 most important features as input to train model\n",
    "\n",
    "# remove columns name symbol ('')\n",
    "x_important_train = x_train_ss.copy()\n",
    "y_train_1= y_train_sm.copy()\n",
    "\n",
    "x_important_train = x_important_train.rename(columns=lambda x: x.replace(\"'\",\"\").replace('\"','')).replace(\" \",\"\")\n",
    "# X_imputed_train, y_train_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "65b8c23c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>(Asset Index from year 2006 to 2018, 2013)</th>\n",
       "      <th>(Asset Index from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Asset Index from year 2006 to 2018, 2015)</th>\n",
       "      <th>(Leverage Ratio from year 2006 to 2018, 2013)</th>\n",
       "      <th>(Leverage Ratio from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Leverage Ratio from year 2006 to 2018, 2015)</th>\n",
       "      <th>(Net Profit Ratio from year 2006 to 2018, 2013)</th>\n",
       "      <th>(Net Profit Ratio from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Net Profit Ratio from year 2006 to 2018, 2015)</th>\n",
       "      <th>(Growth rate of sales revenue from year 2006 to 2018, 2013)</th>\n",
       "      <th>...</th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>big4_conduct, 2013, no</th>\n",
       "      <th>big4_conduct, 2013, yes</th>\n",
       "      <th>big4_conduct, 2013, unknown</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.049557</td>\n",
       "      <td>-0.019369</td>\n",
       "      <td>0.184539</td>\n",
       "      <td>-0.255835</td>\n",
       "      <td>0.127367</td>\n",
       "      <td>-0.397766</td>\n",
       "      <td>0.037418</td>\n",
       "      <td>0.062701</td>\n",
       "      <td>0.106719</td>\n",
       "      <td>-0.006551</td>\n",
       "      <td>...</td>\n",
       "      <td>1.504263</td>\n",
       "      <td>-2.608196</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>3.014019</td>\n",
       "      <td>-3.526067</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>4.711003</td>\n",
       "      <td>-3.562863</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>5.480508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.042755</td>\n",
       "      <td>-0.114353</td>\n",
       "      <td>-0.132730</td>\n",
       "      <td>-0.533618</td>\n",
       "      <td>-0.272621</td>\n",
       "      <td>-0.759276</td>\n",
       "      <td>-0.024805</td>\n",
       "      <td>0.044058</td>\n",
       "      <td>-0.111517</td>\n",
       "      <td>-0.060586</td>\n",
       "      <td>...</td>\n",
       "      <td>1.104734</td>\n",
       "      <td>0.400732</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>-0.336642</td>\n",
       "      <td>0.298898</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>-0.212269</td>\n",
       "      <td>0.308322</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>-0.182465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.043421</td>\n",
       "      <td>-0.195229</td>\n",
       "      <td>0.097928</td>\n",
       "      <td>-0.679739</td>\n",
       "      <td>-0.128162</td>\n",
       "      <td>-0.620880</td>\n",
       "      <td>-0.031674</td>\n",
       "      <td>0.018402</td>\n",
       "      <td>-0.105273</td>\n",
       "      <td>-0.105568</td>\n",
       "      <td>...</td>\n",
       "      <td>1.209964</td>\n",
       "      <td>-2.608196</td>\n",
       "      <td>-0.195643</td>\n",
       "      <td>3.014019</td>\n",
       "      <td>0.298898</td>\n",
       "      <td>-0.20185</td>\n",
       "      <td>-0.212269</td>\n",
       "      <td>0.308322</td>\n",
       "      <td>-0.241379</td>\n",
       "      <td>-0.182465</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   (Asset Index from year 2006 to 2018, 2013)  \\\n",
       "0                                   -0.049557   \n",
       "1                                   -0.042755   \n",
       "2                                   -0.043421   \n",
       "\n",
       "   (Asset Index from year 2006 to 2018, 2014)  \\\n",
       "0                                   -0.019369   \n",
       "1                                   -0.114353   \n",
       "2                                   -0.195229   \n",
       "\n",
       "   (Asset Index from year 2006 to 2018, 2015)  \\\n",
       "0                                    0.184539   \n",
       "1                                   -0.132730   \n",
       "2                                    0.097928   \n",
       "\n",
       "   (Leverage Ratio from year 2006 to 2018, 2013)  \\\n",
       "0                                      -0.255835   \n",
       "1                                      -0.533618   \n",
       "2                                      -0.679739   \n",
       "\n",
       "   (Leverage Ratio from year 2006 to 2018, 2014)  \\\n",
       "0                                       0.127367   \n",
       "1                                      -0.272621   \n",
       "2                                      -0.128162   \n",
       "\n",
       "   (Leverage Ratio from year 2006 to 2018, 2015)  \\\n",
       "0                                      -0.397766   \n",
       "1                                      -0.759276   \n",
       "2                                      -0.620880   \n",
       "\n",
       "   (Net Profit Ratio from year 2006 to 2018, 2013)  \\\n",
       "0                                         0.037418   \n",
       "1                                        -0.024805   \n",
       "2                                        -0.031674   \n",
       "\n",
       "   (Net Profit Ratio from year 2006 to 2018, 2014)  \\\n",
       "0                                         0.062701   \n",
       "1                                         0.044058   \n",
       "2                                         0.018402   \n",
       "\n",
       "   (Net Profit Ratio from year 2006 to 2018, 2015)  \\\n",
       "0                                         0.106719   \n",
       "1                                        -0.111517   \n",
       "2                                        -0.105273   \n",
       "\n",
       "   (Growth rate of sales revenue from year 2006 to 2018, 2013)  ...  IPO_Time  \\\n",
       "0                                          -0.006551            ...  1.504263   \n",
       "1                                          -0.060586            ...  1.104734   \n",
       "2                                          -0.105568            ...  1.209964   \n",
       "\n",
       "   big4_conduct, 2013, no  big4_conduct, 2013, yes  \\\n",
       "0               -2.608196                -0.195643   \n",
       "1                0.400732                -0.195643   \n",
       "2               -2.608196                -0.195643   \n",
       "\n",
       "   big4_conduct, 2013, unknown  big4_conduct, 2014, no  \\\n",
       "0                     3.014019               -3.526067   \n",
       "1                    -0.336642                0.298898   \n",
       "2                     3.014019                0.298898   \n",
       "\n",
       "   big4_conduct, 2014, yes  big4_conduct, 2014, unknown  \\\n",
       "0                 -0.20185                     4.711003   \n",
       "1                 -0.20185                    -0.212269   \n",
       "2                 -0.20185                    -0.212269   \n",
       "\n",
       "   big4_conduct, 2015, no  big4_conduct, 2015, yes  \\\n",
       "0               -3.562863                -0.241379   \n",
       "1                0.308322                -0.241379   \n",
       "2                0.308322                -0.241379   \n",
       "\n",
       "   big4_conduct, 2015, unknown  \n",
       "0                     5.480508  \n",
       "1                    -0.182465  \n",
       "2                    -0.182465  \n",
       "\n",
       "[3 rows x 43 columns]"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_important_train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "cdab28b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_important_train = x_important_train[[ 'IPO_Time' \n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)'\n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2013)'\n",
    ", '(Leverage Ratio from year 2006 to 2018, 2013)'\n",
    ", '(Inventory Growth Rate from 2006 to 2018, 2015)'\n",
    ", '(Growth rate of accounts receivable from 2006 to 2018, 2015)'\n",
    ", '(Net Profit Ratio from year 2006 to 2018, 2013)'\n",
    "    \n",
    "]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "5d0e5f1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>(Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Time lag of annual report disclosure (days) from year 2006 to 2018, 2013)</th>\n",
       "      <th>(Leverage Ratio from year 2006 to 2018, 2013)</th>\n",
       "      <th>(Inventory Growth Rate from 2006 to 2018, 2015)</th>\n",
       "      <th>(Growth rate of accounts receivable from 2006 to 2018, 2015)</th>\n",
       "      <th>(Net Profit Ratio from year 2006 to 2018, 2013)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.504263</td>\n",
       "      <td>2.895897</td>\n",
       "      <td>1.091219</td>\n",
       "      <td>-0.255835</td>\n",
       "      <td>-0.146987</td>\n",
       "      <td>0.114043</td>\n",
       "      <td>0.037418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.104734</td>\n",
       "      <td>1.295490</td>\n",
       "      <td>2.198067</td>\n",
       "      <td>-0.533618</td>\n",
       "      <td>-0.150192</td>\n",
       "      <td>-0.189677</td>\n",
       "      <td>-0.024805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.209964</td>\n",
       "      <td>2.302081</td>\n",
       "      <td>1.368734</td>\n",
       "      <td>-0.679739</td>\n",
       "      <td>-0.152356</td>\n",
       "      <td>-0.228597</td>\n",
       "      <td>-0.031674</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  \\\n",
       "0  1.504263   \n",
       "1  1.104734   \n",
       "2  1.209964   \n",
       "\n",
       "   (Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)  \\\n",
       "0                                           2.895897                            \n",
       "1                                           1.295490                            \n",
       "2                                           2.302081                            \n",
       "\n",
       "   (Time lag of annual report disclosure (days) from year 2006 to 2018, 2013)  \\\n",
       "0                                           1.091219                            \n",
       "1                                           2.198067                            \n",
       "2                                           1.368734                            \n",
       "\n",
       "   (Leverage Ratio from year 2006 to 2018, 2013)  \\\n",
       "0                                      -0.255835   \n",
       "1                                      -0.533618   \n",
       "2                                      -0.679739   \n",
       "\n",
       "   (Inventory Growth Rate from 2006 to 2018, 2015)  \\\n",
       "0                                        -0.146987   \n",
       "1                                        -0.150192   \n",
       "2                                        -0.152356   \n",
       "\n",
       "   (Growth rate of accounts receivable from 2006 to 2018, 2015)  \\\n",
       "0                                           0.114043              \n",
       "1                                          -0.189677              \n",
       "2                                          -0.228597              \n",
       "\n",
       "   (Net Profit Ratio from year 2006 to 2018, 2013)  \n",
       "0                                         0.037418  \n",
       "1                                        -0.024805  \n",
       "2                                        -0.031674  "
      ]
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_important_train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7d6fa6d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62ab79bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x_val "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "id": "0e00ce3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2016)</th>\n",
       "      <th>company_code</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>NaN</td>\n",
       "      <td>688368.SH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>2.289362</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>1.155750</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.570982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>0.797923</td>\n",
       "      <td>603015.SH</td>\n",
       "      <td>1.078930</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>1.733034</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.158953</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.425312e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.344525</td>\n",
       "      <td>300535.SZ</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.461140</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>0.869091</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.470931e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.058791</td>\n",
       "      <td>1.784644</td>\n",
       "      <td>0.969840</td>\n",
       "      <td>603767.SH</td>\n",
       "      <td>1.013779</td>\n",
       "      <td>0.734240</td>\n",
       "      <td>0.894430</td>\n",
       "      <td>0.818659</td>\n",
       "      <td>0.872339</td>\n",
       "      <td>0.865695</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.497283e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.635009</td>\n",
       "      <td>0.598725</td>\n",
       "      <td>1.053884</td>\n",
       "      <td>603116.SH</td>\n",
       "      <td>0.837348</td>\n",
       "      <td>0.690065</td>\n",
       "      <td>0.995365</td>\n",
       "      <td>0.804959</td>\n",
       "      <td>0.817627</td>\n",
       "      <td>0.831731</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.435507e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2495</th>\n",
       "      <td>1.125944</td>\n",
       "      <td>1.049740</td>\n",
       "      <td>1.022334</td>\n",
       "      <td>600651.SH</td>\n",
       "      <td>0.954579</td>\n",
       "      <td>1.309247</td>\n",
       "      <td>1.133411</td>\n",
       "      <td>0.987368</td>\n",
       "      <td>0.867732</td>\n",
       "      <td>0.532713</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.615360e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2496</th>\n",
       "      <td>0.950460</td>\n",
       "      <td>1.131726</td>\n",
       "      <td>0.760413</td>\n",
       "      <td>300236.SZ</td>\n",
       "      <td>1.073412</td>\n",
       "      <td>1.235325</td>\n",
       "      <td>0.668982</td>\n",
       "      <td>0.884899</td>\n",
       "      <td>0.924845</td>\n",
       "      <td>1.006962</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.309277e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>0.102198</td>\n",
       "      <td>38.113952</td>\n",
       "      <td>0.821863</td>\n",
       "      <td>002568.SZ</td>\n",
       "      <td>1.413391</td>\n",
       "      <td>16.126125</td>\n",
       "      <td>0.769223</td>\n",
       "      <td>0.893893</td>\n",
       "      <td>0.805503</td>\n",
       "      <td>0.540077</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.300982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>1.242847</td>\n",
       "      <td>1.470212</td>\n",
       "      <td>0.752102</td>\n",
       "      <td>002197.SZ</td>\n",
       "      <td>1.199694</td>\n",
       "      <td>1.379932</td>\n",
       "      <td>0.720917</td>\n",
       "      <td>0.925218</td>\n",
       "      <td>0.956824</td>\n",
       "      <td>0.929075</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.197907e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>1.196529</td>\n",
       "      <td>1.936625</td>\n",
       "      <td>1.361339</td>\n",
       "      <td>300202.SZ</td>\n",
       "      <td>1.312545</td>\n",
       "      <td>0.607280</td>\n",
       "      <td>2.262927</td>\n",
       "      <td>1.119700</td>\n",
       "      <td>1.319137</td>\n",
       "      <td>1.115982</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.302797e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2500 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                              NaN   \n",
       "1                                         1.291652   \n",
       "2                                         1.165348   \n",
       "3                                         1.058791   \n",
       "4                                         1.635009   \n",
       "...                                            ...   \n",
       "2495                                      1.125944   \n",
       "2496                                      0.950460   \n",
       "2497                                      0.102198   \n",
       "2498                                      1.242847   \n",
       "2499                                      1.196529   \n",
       "\n",
       "      ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                         1.991758   \n",
       "1                                         0.830398   \n",
       "2                                         1.233075   \n",
       "3                                         1.784644   \n",
       "4                                         0.598725   \n",
       "...                                            ...   \n",
       "2495                                      1.049740   \n",
       "2496                                      1.131726   \n",
       "2497                                     38.113952   \n",
       "2498                                      1.470212   \n",
       "2499                                      1.936625   \n",
       "\n",
       "      ('Asset Index from year 2006 to 2018', 2016) company_code  \\\n",
       "0                                              NaN    688368.SH   \n",
       "1                                         0.797923    603015.SH   \n",
       "2                                         0.344525    300535.SZ   \n",
       "3                                         0.969840    603767.SH   \n",
       "4                                         1.053884    603116.SH   \n",
       "...                                            ...          ...   \n",
       "2495                                      1.022334    600651.SH   \n",
       "2496                                      0.760413    300236.SZ   \n",
       "2497                                      0.821863    002568.SZ   \n",
       "2498                                      0.752102    002197.SZ   \n",
       "2499                                      1.361339    300202.SZ   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                                 NaN   \n",
       "1                                            1.078930   \n",
       "2                                            0.968049   \n",
       "3                                            1.013779   \n",
       "4                                            0.837348   \n",
       "...                                               ...   \n",
       "2495                                         0.954579   \n",
       "2496                                         1.073412   \n",
       "2497                                         1.413391   \n",
       "2498                                         1.199694   \n",
       "2499                                         1.312545   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                            0.854574   \n",
       "1                                            0.409493   \n",
       "2                                            0.659597   \n",
       "3                                            0.734240   \n",
       "4                                            0.690065   \n",
       "...                                               ...   \n",
       "2495                                         1.309247   \n",
       "2496                                         1.235325   \n",
       "2497                                        16.126125   \n",
       "2498                                         1.379932   \n",
       "2499                                         0.607280   \n",
       "\n",
       "      ('Leverage Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                            2.289362   \n",
       "1                                            1.733034   \n",
       "2                                            0.461140   \n",
       "3                                            0.894430   \n",
       "4                                            0.995365   \n",
       "...                                               ...   \n",
       "2495                                         1.133411   \n",
       "2496                                         0.668982   \n",
       "2497                                         0.769223   \n",
       "2498                                         0.720917   \n",
       "2499                                         2.262927   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                              0.972920   \n",
       "1                                              0.907508   \n",
       "2                                              0.908002   \n",
       "3                                              0.818659   \n",
       "4                                              0.804959   \n",
       "...                                                 ...   \n",
       "2495                                           0.987368   \n",
       "2496                                           0.884899   \n",
       "2497                                           0.893893   \n",
       "2498                                           0.925218   \n",
       "2499                                           1.119700   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                              2.192573   \n",
       "1                                              1.047607   \n",
       "2                                              0.833449   \n",
       "3                                              0.872339   \n",
       "4                                              0.817627   \n",
       "...                                                 ...   \n",
       "2495                                           0.867732   \n",
       "2496                                           0.924845   \n",
       "2497                                           0.805503   \n",
       "2498                                           0.956824   \n",
       "2499                                           1.319137   \n",
       "\n",
       "      ('Net Profit Ratio from year 2006 to 2018', 2016)  ...  \\\n",
       "0                                              1.155750  ...   \n",
       "1                                              1.158953  ...   \n",
       "2                                              0.869091  ...   \n",
       "3                                              0.865695  ...   \n",
       "4                                              0.831731  ...   \n",
       "...                                                 ...  ...   \n",
       "2495                                           0.532713  ...   \n",
       "2496                                           1.006962  ...   \n",
       "2497                                           0.540077  ...   \n",
       "2498                                           0.929075  ...   \n",
       "2499                                           1.115982  ...   \n",
       "\n",
       "      big4_conduct, 2014, no  big4_conduct, 2014, yes  \\\n",
       "0                        0.0                      0.0   \n",
       "1                        1.0                      0.0   \n",
       "2                        1.0                      0.0   \n",
       "3                        1.0                      0.0   \n",
       "4                        1.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     1.0                      0.0   \n",
       "2497                     1.0                      0.0   \n",
       "2498                     1.0                      0.0   \n",
       "2499                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2014, unknown  big4_conduct, 2015, no  \\\n",
       "0                             1.0                     0.0   \n",
       "1                             0.0                     1.0   \n",
       "2                             0.0                     1.0   \n",
       "3                             0.0                     1.0   \n",
       "4                             0.0                     1.0   \n",
       "...                           ...                     ...   \n",
       "2495                          0.0                     1.0   \n",
       "2496                          0.0                     1.0   \n",
       "2497                          0.0                     1.0   \n",
       "2498                          0.0                     1.0   \n",
       "2499                          0.0                     1.0   \n",
       "\n",
       "      big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \\\n",
       "0                         0.0                          1.0   \n",
       "1                         0.0                          0.0   \n",
       "2                         0.0                          0.0   \n",
       "3                         0.0                          0.0   \n",
       "4                         0.0                          0.0   \n",
       "...                       ...                          ...   \n",
       "2495                      0.0                          0.0   \n",
       "2496                      0.0                          0.0   \n",
       "2497                      0.0                          0.0   \n",
       "2498                      0.0                          0.0   \n",
       "2499                      0.0                          0.0   \n",
       "\n",
       "      big4_conduct, 2016, no  big4_conduct, 2016, yes  \\\n",
       "0                        1.0                      0.0   \n",
       "1                        1.0                      0.0   \n",
       "2                        1.0                      0.0   \n",
       "3                        1.0                      0.0   \n",
       "4                        1.0                      0.0   \n",
       "...                      ...                      ...   \n",
       "2495                     1.0                      0.0   \n",
       "2496                     1.0                      0.0   \n",
       "2497                     1.0                      0.0   \n",
       "2498                     1.0                      0.0   \n",
       "2499                     1.0                      0.0   \n",
       "\n",
       "      big4_conduct, 2016, unknown      IPO_Time  \n",
       "0                             0.0  1.570982e+09  \n",
       "1                             0.0  1.425312e+09  \n",
       "2                             0.0  1.470931e+09  \n",
       "3                             0.0  1.497283e+09  \n",
       "4                             0.0  1.435507e+09  \n",
       "...                           ...           ...  \n",
       "2495                          0.0  6.615360e+08  \n",
       "2496                          0.0  1.309277e+09  \n",
       "2497                          0.0  1.300982e+09  \n",
       "2498                          0.0  1.197907e+09  \n",
       "2499                          0.0  1.302797e+09  \n",
       "\n",
       "[2500 rows x 44 columns]"
      ]
     },
     "execution_count": 522,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "id": "f12ea21d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# delete company_code \n",
    "\n",
    "x_val.drop('company_code' , axis=1 , inplace= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "id": "d77dd577",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "x_val = x_val.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "id": "1fcae59a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use knn imputer to fill value \n",
    "\n",
    "imputer_best = KNNImputer(n_neighbors=6, weights=\"uniform\") \n",
    "\n",
    "X_imputed_val = imputer_best.fit_transform(x_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "id": "1e0ce955",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "X_imputed_val= pd.DataFrame(X_imputed_val)\n",
    "X_imputed_val.columns= x_val.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "id": "8ad25d0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Growth rate of sales revenue from year 2006 to 2018', 2014)</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.290492</td>\n",
       "      <td>1.991758</td>\n",
       "      <td>1.290358</td>\n",
       "      <td>1.094669</td>\n",
       "      <td>0.854574</td>\n",
       "      <td>2.289362</td>\n",
       "      <td>0.972920</td>\n",
       "      <td>2.192573</td>\n",
       "      <td>1.155750</td>\n",
       "      <td>1.221873</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.570982e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.291652</td>\n",
       "      <td>0.830398</td>\n",
       "      <td>0.797923</td>\n",
       "      <td>1.078930</td>\n",
       "      <td>0.409493</td>\n",
       "      <td>1.733034</td>\n",
       "      <td>0.907508</td>\n",
       "      <td>1.047607</td>\n",
       "      <td>1.158953</td>\n",
       "      <td>1.042931</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.425312e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.165348</td>\n",
       "      <td>1.233075</td>\n",
       "      <td>0.344525</td>\n",
       "      <td>0.968049</td>\n",
       "      <td>0.659597</td>\n",
       "      <td>0.461140</td>\n",
       "      <td>0.908002</td>\n",
       "      <td>0.833449</td>\n",
       "      <td>0.869091</td>\n",
       "      <td>1.012574</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.470931e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.058791</td>\n",
       "      <td>1.784644</td>\n",
       "      <td>0.969840</td>\n",
       "      <td>1.013779</td>\n",
       "      <td>0.734240</td>\n",
       "      <td>0.894430</td>\n",
       "      <td>0.818659</td>\n",
       "      <td>0.872339</td>\n",
       "      <td>0.865695</td>\n",
       "      <td>1.105374</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.497283e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.635009</td>\n",
       "      <td>0.598725</td>\n",
       "      <td>1.053884</td>\n",
       "      <td>0.837348</td>\n",
       "      <td>0.690065</td>\n",
       "      <td>0.995365</td>\n",
       "      <td>0.804959</td>\n",
       "      <td>0.817627</td>\n",
       "      <td>0.831731</td>\n",
       "      <td>0.970950</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.435507e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                      1.290492   \n",
       "1                                      1.291652   \n",
       "2                                      1.165348   \n",
       "3                                      1.058791   \n",
       "4                                      1.635009   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      1.991758   \n",
       "1                                      0.830398   \n",
       "2                                      1.233075   \n",
       "3                                      1.784644   \n",
       "4                                      0.598725   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2016)  \\\n",
       "0                                      1.290358   \n",
       "1                                      0.797923   \n",
       "2                                      0.344525   \n",
       "3                                      0.969840   \n",
       "4                                      1.053884   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                         1.094669   \n",
       "1                                         1.078930   \n",
       "2                                         0.968049   \n",
       "3                                         1.013779   \n",
       "4                                         0.837348   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                         0.854574   \n",
       "1                                         0.409493   \n",
       "2                                         0.659597   \n",
       "3                                         0.734240   \n",
       "4                                         0.690065   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                         2.289362   \n",
       "1                                         1.733034   \n",
       "2                                         0.461140   \n",
       "3                                         0.894430   \n",
       "4                                         0.995365   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.972920   \n",
       "1                                           0.907508   \n",
       "2                                           0.908002   \n",
       "3                                           0.818659   \n",
       "4                                           0.804959   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           2.192573   \n",
       "1                                           1.047607   \n",
       "2                                           0.833449   \n",
       "3                                           0.872339   \n",
       "4                                           0.817627   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                           1.155750   \n",
       "1                                           1.158953   \n",
       "2                                           0.869091   \n",
       "3                                           0.865695   \n",
       "4                                           0.831731   \n",
       "\n",
       "   ('Growth rate of sales revenue from year 2006 to 2018', 2014)  ...  \\\n",
       "0                                           1.221873              ...   \n",
       "1                                           1.042931              ...   \n",
       "2                                           1.012574              ...   \n",
       "3                                           1.105374              ...   \n",
       "4                                           0.970950              ...   \n",
       "\n",
       "   big4_conduct, 2014, no  big4_conduct, 2014, yes  \\\n",
       "0                     0.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "3                     1.0                      0.0   \n",
       "4                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2014, unknown  big4_conduct, 2015, no  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          0.0                     1.0   \n",
       "2                          0.0                     1.0   \n",
       "3                          0.0                     1.0   \n",
       "4                          0.0                     1.0   \n",
       "\n",
       "   big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \\\n",
       "0                      0.0                          1.0   \n",
       "1                      0.0                          0.0   \n",
       "2                      0.0                          0.0   \n",
       "3                      0.0                          0.0   \n",
       "4                      0.0                          0.0   \n",
       "\n",
       "   big4_conduct, 2016, no  big4_conduct, 2016, yes  \\\n",
       "0                     1.0                      0.0   \n",
       "1                     1.0                      0.0   \n",
       "2                     1.0                      0.0   \n",
       "3                     1.0                      0.0   \n",
       "4                     1.0                      0.0   \n",
       "\n",
       "   big4_conduct, 2016, unknown      IPO_Time  \n",
       "0                          0.0  1.570982e+09  \n",
       "1                          0.0  1.425312e+09  \n",
       "2                          0.0  1.470931e+09  \n",
       "3                          0.0  1.497283e+09  \n",
       "4                          0.0  1.435507e+09  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 527,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_imputed_val.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "id": "73aeca75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of classes before fit {0: 2423, 1: 77}\n",
      "The number of classes after fit {0: 2150, 1: 2150}\n"
     ]
    }
   ],
   "source": [
    "# over-sampling (smote)\n",
    "\n",
    "# deal with unbalanced data (over sampling).\n",
    "# under sampling is not considered like Ensemble Techniques, because it delete data. \n",
    "\n",
    "from imblearn.combine import SMOTETomek\n",
    "smote= SMOTETomek(random_state=42)\n",
    "\n",
    "x_val_sm, y_val_sm= smote.fit_resample(X_imputed_val, y_val)\n",
    "print(\"The number of classes before fit {}\".format(y_val.value_counts().to_dict()))\n",
    "print(\"The number of classes after fit {}\".format(y_val_sm.value_counts().to_dict()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41195349",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "id": "4b9ed44c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Asset Index from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Leverage Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2014)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2015)</th>\n",
       "      <th>('Net Profit Ratio from year 2006 to 2018', 2016)</th>\n",
       "      <th>('Growth rate of sales revenue from year 2006 to 2018', 2014)</th>\n",
       "      <th>...</th>\n",
       "      <th>big4_conduct, 2014, no</th>\n",
       "      <th>big4_conduct, 2014, yes</th>\n",
       "      <th>big4_conduct, 2014, unknown</th>\n",
       "      <th>big4_conduct, 2015, no</th>\n",
       "      <th>big4_conduct, 2015, yes</th>\n",
       "      <th>big4_conduct, 2015, unknown</th>\n",
       "      <th>big4_conduct, 2016, no</th>\n",
       "      <th>big4_conduct, 2016, yes</th>\n",
       "      <th>big4_conduct, 2016, unknown</th>\n",
       "      <th>IPO_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.033677</td>\n",
       "      <td>0.019850</td>\n",
       "      <td>0.044999</td>\n",
       "      <td>0.140698</td>\n",
       "      <td>-0.273707</td>\n",
       "      <td>3.025535</td>\n",
       "      <td>0.021884</td>\n",
       "      <td>0.597116</td>\n",
       "      <td>0.050510</td>\n",
       "      <td>-0.050964</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.295271</td>\n",
       "      <td>-0.256417</td>\n",
       "      <td>4.703008</td>\n",
       "      <td>-3.476448</td>\n",
       "      <td>-0.262741</td>\n",
       "      <td>5.471312</td>\n",
       "      <td>0.283607</td>\n",
       "      <td>-0.269471</td>\n",
       "      <td>-0.08382</td>\n",
       "      <td>1.457006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.130205</td>\n",
       "      <td>-0.163533</td>\n",
       "      <td>-0.505323</td>\n",
       "      <td>-0.222379</td>\n",
       "      <td>-0.459690</td>\n",
       "      <td>-1.297688</td>\n",
       "      <td>0.001071</td>\n",
       "      <td>-0.001781</td>\n",
       "      <td>-0.057076</td>\n",
       "      <td>-0.166715</td>\n",
       "      <td>...</td>\n",
       "      <td>0.340490</td>\n",
       "      <td>-0.256417</td>\n",
       "      <td>-0.212630</td>\n",
       "      <td>0.326037</td>\n",
       "      <td>-0.262741</td>\n",
       "      <td>-0.182772</td>\n",
       "      <td>0.283607</td>\n",
       "      <td>-0.269471</td>\n",
       "      <td>-0.08382</td>\n",
       "      <td>1.039640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.212396</td>\n",
       "      <td>-0.030212</td>\n",
       "      <td>-0.141490</td>\n",
       "      <td>-0.091251</td>\n",
       "      <td>-0.388491</td>\n",
       "      <td>-0.273081</td>\n",
       "      <td>-0.027574</td>\n",
       "      <td>0.015355</td>\n",
       "      <td>-0.058351</td>\n",
       "      <td>-0.115393</td>\n",
       "      <td>...</td>\n",
       "      <td>0.340490</td>\n",
       "      <td>-0.256417</td>\n",
       "      <td>-0.212630</td>\n",
       "      <td>0.326037</td>\n",
       "      <td>-0.262741</td>\n",
       "      <td>-0.182772</td>\n",
       "      <td>0.283607</td>\n",
       "      <td>-0.269471</td>\n",
       "      <td>-0.08382</td>\n",
       "      <td>1.149568</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ('Asset Index from year 2006 to 2018', 2014)  \\\n",
       "0                                     -0.033677   \n",
       "1                                     -0.130205   \n",
       "2                                     -0.212396   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2015)  \\\n",
       "0                                      0.019850   \n",
       "1                                     -0.163533   \n",
       "2                                     -0.030212   \n",
       "\n",
       "   ('Asset Index from year 2006 to 2018', 2016)  \\\n",
       "0                                      0.044999   \n",
       "1                                     -0.505323   \n",
       "2                                     -0.141490   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                         0.140698   \n",
       "1                                        -0.222379   \n",
       "2                                        -0.091251   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                        -0.273707   \n",
       "1                                        -0.459690   \n",
       "2                                        -0.388491   \n",
       "\n",
       "   ('Leverage Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                         3.025535   \n",
       "1                                        -1.297688   \n",
       "2                                        -0.273081   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2014)  \\\n",
       "0                                           0.021884   \n",
       "1                                           0.001071   \n",
       "2                                          -0.027574   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2015)  \\\n",
       "0                                           0.597116   \n",
       "1                                          -0.001781   \n",
       "2                                           0.015355   \n",
       "\n",
       "   ('Net Profit Ratio from year 2006 to 2018', 2016)  \\\n",
       "0                                           0.050510   \n",
       "1                                          -0.057076   \n",
       "2                                          -0.058351   \n",
       "\n",
       "   ('Growth rate of sales revenue from year 2006 to 2018', 2014)  ...  \\\n",
       "0                                          -0.050964              ...   \n",
       "1                                          -0.166715              ...   \n",
       "2                                          -0.115393              ...   \n",
       "\n",
       "   big4_conduct, 2014, no  big4_conduct, 2014, yes  \\\n",
       "0               -3.295271                -0.256417   \n",
       "1                0.340490                -0.256417   \n",
       "2                0.340490                -0.256417   \n",
       "\n",
       "   big4_conduct, 2014, unknown  big4_conduct, 2015, no  \\\n",
       "0                     4.703008               -3.476448   \n",
       "1                    -0.212630                0.326037   \n",
       "2                    -0.212630                0.326037   \n",
       "\n",
       "   big4_conduct, 2015, yes  big4_conduct, 2015, unknown  \\\n",
       "0                -0.262741                     5.471312   \n",
       "1                -0.262741                    -0.182772   \n",
       "2                -0.262741                    -0.182772   \n",
       "\n",
       "   big4_conduct, 2016, no  big4_conduct, 2016, yes  \\\n",
       "0                0.283607                -0.269471   \n",
       "1                0.283607                -0.269471   \n",
       "2                0.283607                -0.269471   \n",
       "\n",
       "   big4_conduct, 2016, unknown  IPO_Time  \n",
       "0                     -0.08382  1.457006  \n",
       "1                     -0.08382  1.039640  \n",
       "2                     -0.08382  1.149568  \n",
       "\n",
       "[3 rows x 43 columns]"
      ]
     },
     "execution_count": 529,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# standardide data\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "x_val_ss= x_val_sm.copy()\n",
    "\n",
    "ss = StandardScaler()\n",
    "\n",
    "x_val_ss= ss.fit_transform(x_val_ss)\n",
    "\n",
    "x_val_ss= pd.DataFrame(x_val_ss)\n",
    "\n",
    "x_val_ss.columns= x_val_sm.columns\n",
    "\n",
    "x_val_ss.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "id": "688e94a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove columns name symbol ('')\n",
    "\n",
    "x_important_val = x_val_ss.copy()\n",
    "y_val_1= y_val_sm.copy()\n",
    "\n",
    "x_important_val = x_important_val.rename(columns=lambda x: x.replace(\"'\",\"\").replace('\"','')).replace(\" \",\"\")\n",
    "\n",
    "# x_important_val, y_val_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "id": "c32e77a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2014, 2015 ,2016 features are selected by using x_train (2013, 2014, 2015) important features and sequence\n",
    "\n",
    "x_important_val = x_important_val[[ 'IPO_Time' \n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2015)'\n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)'\n",
    ", '(Leverage Ratio from year 2006 to 2018, 2014)'\n",
    ", '(Inventory Growth Rate from 2006 to 2018, 2016)'\n",
    ", '(Growth rate of accounts receivable from 2006 to 2018, 2016)'\n",
    ", '(Net Profit Ratio from year 2006 to 2018, 2014)'\n",
    "    \n",
    "]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "id": "5bc518fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>(Time lag of annual report disclosure (days) from year 2006 to 2018, 2015)</th>\n",
       "      <th>(Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Leverage Ratio from year 2006 to 2018, 2014)</th>\n",
       "      <th>(Inventory Growth Rate from 2006 to 2018, 2016)</th>\n",
       "      <th>(Growth rate of accounts receivable from 2006 to 2018, 2016)</th>\n",
       "      <th>(Net Profit Ratio from year 2006 to 2018, 2014)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.457006</td>\n",
       "      <td>3.468673</td>\n",
       "      <td>2.815936</td>\n",
       "      <td>0.140698</td>\n",
       "      <td>-0.049760</td>\n",
       "      <td>-0.024515</td>\n",
       "      <td>0.021884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.039640</td>\n",
       "      <td>0.199147</td>\n",
       "      <td>1.245237</td>\n",
       "      <td>-0.222379</td>\n",
       "      <td>-0.025999</td>\n",
       "      <td>-0.026287</td>\n",
       "      <td>0.001071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  \\\n",
       "0  1.457006   \n",
       "1  1.039640   \n",
       "\n",
       "   (Time lag of annual report disclosure (days) from year 2006 to 2018, 2015)  \\\n",
       "0                                           3.468673                            \n",
       "1                                           0.199147                            \n",
       "\n",
       "   (Time lag of annual report disclosure (days) from year 2006 to 2018, 2014)  \\\n",
       "0                                           2.815936                            \n",
       "1                                           1.245237                            \n",
       "\n",
       "   (Leverage Ratio from year 2006 to 2018, 2014)  \\\n",
       "0                                       0.140698   \n",
       "1                                      -0.222379   \n",
       "\n",
       "   (Inventory Growth Rate from 2006 to 2018, 2016)  \\\n",
       "0                                        -0.049760   \n",
       "1                                        -0.025999   \n",
       "\n",
       "   (Growth rate of accounts receivable from 2006 to 2018, 2016)  \\\n",
       "0                                          -0.024515              \n",
       "1                                          -0.026287              \n",
       "\n",
       "   (Net Profit Ratio from year 2006 to 2018, 2014)  \n",
       "0                                         0.021884  \n",
       "1                                         0.001071  "
      ]
     },
     "execution_count": 537,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_important_val.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ad73fa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51c28b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test.drop('company_code' , axis=1 , inplace= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "id": "da9568ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test dataset do imputer (not do over sampling)\n",
    "x_test = x_test.astype(float)\n",
    "\n",
    "X_imputed_test = imputer_best.fit_transform(x_test)\n",
    "X_imputed_test= pd.DataFrame(X_imputed_test)\n",
    "X_imputed_test.columns= x_test.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 627,
   "id": "ea11be1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_imputed_test = imputer_best.fit_transform(x_test)\n",
    "X_imputed_test= pd.DataFrame(X_imputed_test)\n",
    "X_imputed_test.columns= x_test.columns\n",
    "\n",
    "\n",
    "ss = StandardScaler()\n",
    "\n",
    "X_imputed_test= ss.fit_transform(X_imputed_test)\n",
    "\n",
    "X_imputed_test= pd.DataFrame(X_imputed_test)\n",
    "\n",
    "X_imputed_test.columns= x_test.columns\n",
    "\n",
    "x_important_test = X_imputed_test.copy()\n",
    "\n",
    "x_important_test = x_important_test.rename(columns=lambda x: x.replace(\"'\",\"\").replace('\"','')).replace(\" \",\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 630,
   "id": "047a3738",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2015, 2016 ,2017 features are selected by using 7 important features and sequence\n",
    "\n",
    "x_important_test = x_important_test[[ 'IPO_Time' \n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2016)'\n",
    ", '(Time lag of annual report disclosure (days) from year 2006 to 2018, 2015)'\n",
    ", '(Leverage Ratio from year 2006 to 2018, 2015)'\n",
    ", '(Inventory Growth Rate from 2006 to 2018, 2017)'\n",
    ", '(Growth rate of accounts receivable from 2006 to 2018, 2017)'\n",
    ", '(Net Profit Ratio from year 2006 to 2018, 2015)'\n",
    "    \n",
    "]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 635,
   "id": "5465c477",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test_1=  x_important_test.copy()\n",
    "x_test_1.columns = x_train_1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 636,
   "id": "53513959",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>Time lag_middle_year</th>\n",
       "      <th>Time lag_earlier_year</th>\n",
       "      <th>Leverage Ratio_earlier_year</th>\n",
       "      <th>Inventory Growth Rate_final_year</th>\n",
       "      <th>Growth rate of accounts receivable_final_year</th>\n",
       "      <th>Net Profit Ratio_earlier_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.294982</td>\n",
       "      <td>3.740837</td>\n",
       "      <td>2.627691</td>\n",
       "      <td>-0.275942</td>\n",
       "      <td>-0.001845</td>\n",
       "      <td>-0.056836</td>\n",
       "      <td>0.385848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.739575</td>\n",
       "      <td>-0.228401</td>\n",
       "      <td>-0.399645</td>\n",
       "      <td>-1.005661</td>\n",
       "      <td>-0.028559</td>\n",
       "      <td>-0.073846</td>\n",
       "      <td>0.017353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  Time lag_middle_year  Time lag_earlier_year  \\\n",
       "0  1.294982              3.740837               2.627691   \n",
       "1  0.739575             -0.228401              -0.399645   \n",
       "\n",
       "   Leverage Ratio_earlier_year  Inventory Growth Rate_final_year  \\\n",
       "0                    -0.275942                         -0.001845   \n",
       "1                    -1.005661                         -0.028559   \n",
       "\n",
       "   Growth rate of accounts receivable_final_year  \\\n",
       "0                                      -0.056836   \n",
       "1                                      -0.073846   \n",
       "\n",
       "   Net Profit Ratio_earlier_year  \n",
       "0                       0.385848  \n",
       "1                       0.017353  "
      ]
     },
     "execution_count": 636,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_1.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 632,
   "id": "03a9fedd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>Time lag_middle_year</th>\n",
       "      <th>Time lag_earlier_year</th>\n",
       "      <th>Leverage Ratio_earlier_year</th>\n",
       "      <th>Inventory Growth Rate_final_year</th>\n",
       "      <th>Growth rate of accounts receivable_final_year</th>\n",
       "      <th>Net Profit Ratio_earlier_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.504263</td>\n",
       "      <td>2.895897</td>\n",
       "      <td>1.091219</td>\n",
       "      <td>-0.255835</td>\n",
       "      <td>-0.146987</td>\n",
       "      <td>0.114043</td>\n",
       "      <td>0.037418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.104734</td>\n",
       "      <td>1.295490</td>\n",
       "      <td>2.198067</td>\n",
       "      <td>-0.533618</td>\n",
       "      <td>-0.150192</td>\n",
       "      <td>-0.189677</td>\n",
       "      <td>-0.024805</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  Time lag_middle_year  Time lag_earlier_year  \\\n",
       "0  1.504263              2.895897               1.091219   \n",
       "1  1.104734              1.295490               2.198067   \n",
       "\n",
       "   Leverage Ratio_earlier_year  Inventory Growth Rate_final_year  \\\n",
       "0                    -0.255835                         -0.146987   \n",
       "1                    -0.533618                         -0.150192   \n",
       "\n",
       "   Growth rate of accounts receivable_final_year  \\\n",
       "0                                       0.114043   \n",
       "1                                      -0.189677   \n",
       "\n",
       "   Net Profit Ratio_earlier_year  \n",
       "0                       0.037418  \n",
       "1                      -0.024805  "
      ]
     },
     "execution_count": 632,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_1.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 606,
   "id": "f46d2747",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use same feature name to represent realtively same data\n",
    "# e.g. In traindataset, Time lag of annual report disclosure (days) 2014) is a middle year between 2013 and 2015.\n",
    "# In validation dataset, Time lag of annual report disclosure (days) 2015  is a middle year between 2014 and 2016.\n",
    "x_train_1 = x_important_train.copy() \n",
    "x_train_1.rename(columns={ x_train_1.columns[1]: 'Time lag_middle_year',\n",
    "                                    x_train_1.columns[2]: 'Time lag_earlier_year',\n",
    "                                     x_train_1.columns[3]: 'Leverage Ratio_earlier_year',\n",
    "                                     x_train_1.columns[4]: 'Inventory Growth Rate_final_year',\n",
    "                                     x_train_1.columns[5]: 'Growth rate of accounts receivable_final_year',\n",
    "                                     x_train_1.columns[6]: 'Net Profit Ratio_earlier_year'\n",
    "                                    }, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "id": "d8844e3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>Time lag_middle_year</th>\n",
       "      <th>Time lag_earlier_year</th>\n",
       "      <th>Leverage Ratio_earlier_year</th>\n",
       "      <th>Inventory Growth Rate_final_year</th>\n",
       "      <th>Growth rate of accounts receivable_final_year</th>\n",
       "      <th>Net Profit Ratio_earlier_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.504263</td>\n",
       "      <td>2.895897</td>\n",
       "      <td>1.091219</td>\n",
       "      <td>-0.255835</td>\n",
       "      <td>-0.146987</td>\n",
       "      <td>0.114043</td>\n",
       "      <td>0.037418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.104734</td>\n",
       "      <td>1.295490</td>\n",
       "      <td>2.198067</td>\n",
       "      <td>-0.533618</td>\n",
       "      <td>-0.150192</td>\n",
       "      <td>-0.189677</td>\n",
       "      <td>-0.024805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.209964</td>\n",
       "      <td>2.302081</td>\n",
       "      <td>1.368734</td>\n",
       "      <td>-0.679739</td>\n",
       "      <td>-0.152356</td>\n",
       "      <td>-0.228597</td>\n",
       "      <td>-0.031674</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  Time lag_middle_year  Time lag_earlier_year  \\\n",
       "0  1.504263              2.895897               1.091219   \n",
       "1  1.104734              1.295490               2.198067   \n",
       "2  1.209964              2.302081               1.368734   \n",
       "\n",
       "   Leverage Ratio_earlier_year  Inventory Growth Rate_final_year  \\\n",
       "0                    -0.255835                         -0.146987   \n",
       "1                    -0.533618                         -0.150192   \n",
       "2                    -0.679739                         -0.152356   \n",
       "\n",
       "   Growth rate of accounts receivable_final_year  \\\n",
       "0                                       0.114043   \n",
       "1                                      -0.189677   \n",
       "2                                      -0.228597   \n",
       "\n",
       "   Net Profit Ratio_earlier_year  \n",
       "0                       0.037418  \n",
       "1                      -0.024805  \n",
       "2                      -0.031674  "
      ]
     },
     "execution_count": 607,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_1.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 611,
   "id": "5b9bd95f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_val_1=  x_important_val.copy()\n",
    "x_val_1.columns = x_train_1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "id": "23622388",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>Time lag_middle_year</th>\n",
       "      <th>Time lag_earlier_year</th>\n",
       "      <th>Leverage Ratio_earlier_year</th>\n",
       "      <th>Inventory Growth Rate_final_year</th>\n",
       "      <th>Growth rate of accounts receivable_final_year</th>\n",
       "      <th>Net Profit Ratio_earlier_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.457006</td>\n",
       "      <td>3.468673</td>\n",
       "      <td>2.815936</td>\n",
       "      <td>0.140698</td>\n",
       "      <td>-0.049760</td>\n",
       "      <td>-0.024515</td>\n",
       "      <td>0.021884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.039640</td>\n",
       "      <td>0.199147</td>\n",
       "      <td>1.245237</td>\n",
       "      <td>-0.222379</td>\n",
       "      <td>-0.025999</td>\n",
       "      <td>-0.026287</td>\n",
       "      <td>0.001071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.149568</td>\n",
       "      <td>1.612722</td>\n",
       "      <td>2.233142</td>\n",
       "      <td>-0.091251</td>\n",
       "      <td>-0.039625</td>\n",
       "      <td>-0.026623</td>\n",
       "      <td>-0.027574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  Time lag_middle_year  Time lag_earlier_year  \\\n",
       "0  1.457006              3.468673               2.815936   \n",
       "1  1.039640              0.199147               1.245237   \n",
       "2  1.149568              1.612722               2.233142   \n",
       "\n",
       "   Leverage Ratio_earlier_year  Inventory Growth Rate_final_year  \\\n",
       "0                     0.140698                         -0.049760   \n",
       "1                    -0.222379                         -0.025999   \n",
       "2                    -0.091251                         -0.039625   \n",
       "\n",
       "   Growth rate of accounts receivable_final_year  \\\n",
       "0                                      -0.024515   \n",
       "1                                      -0.026287   \n",
       "2                                      -0.026623   \n",
       "\n",
       "   Net Profit Ratio_earlier_year  \n",
       "0                       0.021884  \n",
       "1                       0.001071  \n",
       "2                      -0.027574  "
      ]
     },
     "execution_count": 634,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_val_1.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 637,
   "id": "16c2dd3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IPO_Time</th>\n",
       "      <th>Time lag_middle_year</th>\n",
       "      <th>Time lag_earlier_year</th>\n",
       "      <th>Leverage Ratio_earlier_year</th>\n",
       "      <th>Inventory Growth Rate_final_year</th>\n",
       "      <th>Growth rate of accounts receivable_final_year</th>\n",
       "      <th>Net Profit Ratio_earlier_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.294982</td>\n",
       "      <td>3.740837</td>\n",
       "      <td>2.627691</td>\n",
       "      <td>-0.275942</td>\n",
       "      <td>-0.001845</td>\n",
       "      <td>-0.056836</td>\n",
       "      <td>0.385848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.739575</td>\n",
       "      <td>-0.228401</td>\n",
       "      <td>-0.399645</td>\n",
       "      <td>-1.005661</td>\n",
       "      <td>-0.028559</td>\n",
       "      <td>-0.073846</td>\n",
       "      <td>0.017353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.913510</td>\n",
       "      <td>-0.319334</td>\n",
       "      <td>-0.017115</td>\n",
       "      <td>-0.595611</td>\n",
       "      <td>-0.031851</td>\n",
       "      <td>-0.076511</td>\n",
       "      <td>-0.051571</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IPO_Time  Time lag_middle_year  Time lag_earlier_year  \\\n",
       "0  1.294982              3.740837               2.627691   \n",
       "1  0.739575             -0.228401              -0.399645   \n",
       "2  0.913510             -0.319334              -0.017115   \n",
       "\n",
       "   Leverage Ratio_earlier_year  Inventory Growth Rate_final_year  \\\n",
       "0                    -0.275942                         -0.001845   \n",
       "1                    -1.005661                         -0.028559   \n",
       "2                    -0.595611                         -0.031851   \n",
       "\n",
       "   Growth rate of accounts receivable_final_year  \\\n",
       "0                                      -0.056836   \n",
       "1                                      -0.073846   \n",
       "2                                      -0.076511   \n",
       "\n",
       "   Net Profit Ratio_earlier_year  \n",
       "0                       0.385848  \n",
       "1                       0.017353  \n",
       "2                      -0.051571  "
      ]
     },
     "execution_count": 637,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_1.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eaa329c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train dataset: \n",
    "\n",
    "x_train_1\n",
    "y_train_sm\n",
    "\n",
    "# Validation dataset: \n",
    "\n",
    "x_val_1\n",
    "y_val_sm\n",
    "\n",
    "# Test dataset\n",
    "\n",
    "x_test_1\n",
    "y_test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1072,
   "id": "665d81cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1045,
   "id": "42131014",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1.0, 'n_estimators': 1}, 0.9033340233846751\n"
     ]
    }
   ],
   "source": [
    "# model\n",
    "\n",
    "# 1.  Adaptive Boosting classifier (AdaBoostClassifier from sklearn)\n",
    "\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n",
    "              \"base_estimator__splitter\" :   [\"best\", \"random\"],\n",
    "              \"n_estimators\": [1, 10, 20],\n",
    "              'learning_rate': [1.0, 2.0, 3.0],\n",
    "             }\n",
    "\n",
    "\n",
    "tree = DecisionTreeClassifier(random_state = 42, class_weight = \"balanced\")\n",
    "\n",
    "ada = AdaBoostClassifier(base_estimator =tree)\n",
    "\n",
    "\n",
    "grid_search_Ada = GridSearchCV(ada, param_grid=param_grid)\n",
    "\n",
    "grid_search_Ada.fit(x_train_1, y_train_sm)\n",
    "\n",
    "print('{}, {}'.format(grid_search_Ada.best_params_,grid_search_Ada.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86acf20a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1058,
   "id": "5f6cc6a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ada boost:': 'Acc: 0.50, Prec: 0.51, Recall: 0.20'}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "adaBoost_pred= grid_search_Ada.predict(x_val_1)\n",
    "results = {}\n",
    "results['ada boost:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, adaBoost_pred),\n",
    "                                                                    precision_score(y_val_sm, adaBoost_pred,zero_division=1),\n",
    "                                                                    recall_score(y_val_sm, adaBoost_pred,zero_division=1)) \n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1059,
   "id": "396d04e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ada boost:': 'Acc: 0.50, Prec: 0.51, Recall: 0.20', 'dc:': 'Acc: 0.50, Prec: 1.00, Recall: 0.00'}\n"
     ]
    }
   ],
   "source": [
    "# 2. dummy classifier\n",
    "\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "\n",
    "dc = Pipeline( steps = [ ('model',DummyClassifier())] )\n",
    "\n",
    "dc.fit(x_train_1, y_train_sm)\n",
    "dc_pred = dc.predict(x_val_1)\n",
    "\n",
    "results['dc:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, dc_pred),\n",
    "                                                                    precision_score(y_val_sm, dc_pred,zero_division=1),\n",
    "                                                                    recall_score(y_val_sm, dc_pred,zero_division=1)) \n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 959,
   "id": "6860aa03",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 0.001, 'penalty': 'l2'}, 0.6587485515643106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: \n",
      "80 fits failed out of a total of 160.\n",
      "The score on these train-test partitions for these parameters will be set to nan.\n",
      "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
      "\n",
      "Below are more details about the failures:\n",
      "--------------------------------------------------------------------------------\n",
      "40 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1461, in fit\n",
      "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 447, in _check_solver\n",
      "    raise ValueError(\n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "40 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1461, in fit\n",
      "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
      "  File \"/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 447, in _check_solver\n",
      "    raise ValueError(\n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
      "/Users/spring/opt/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py:969: UserWarning: One or more of the test scores are non-finite: [       nan 0.65689455        nan 0.65388315        nan 0.65874855\n",
      "        nan 0.65388315        nan 0.65550513        nan 0.65388315\n",
      "        nan 0.65318817        nan 0.65388315        nan 0.6545784\n",
      "        nan 0.65388315        nan 0.6541149         nan 0.65388315\n",
      "        nan 0.65388315        nan 0.65388315        nan 0.65388315\n",
      "        nan 0.65388315]\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# 3. logistic regression\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "lr= LogisticRegression()\n",
    "\n",
    "parameters = {'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
    "              'C':[0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000]  }\n",
    "\n",
    "# 0.001 is the best parameter, and add 0.0001  into model-c\n",
    "\n",
    "lr = GridSearchCV( lr, param_grid= parameters, n_jobs = 7 )\n",
    "\n",
    "lr.fit(x_train_1, y_train_sm)\n",
    "\n",
    "print('{}, {}'.format(lr.best_params_,lr.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1060,
   "id": "8cc0267d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ada boost:': 'Acc: 0.50, Prec: 0.51, Recall: 0.20', 'dc:': 'Acc: 0.50, Prec: 1.00, Recall: 0.00', 'lr:': 'Acc: 0.59, Prec: 0.56, Recall: 0.83'}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "print('{}, {}'.format(lr.best_params_,lr.best_score_))\n",
    "lr_pred = lr.predict(x_val_1)\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "\n",
    "results['lr:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, lr_pred),\n",
    "                                                                    precision_score(y_val_sm, lr_pred),\n",
    "                                                                    recall_score(y_val_sm, lr_pred)) \n",
    "\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1081,
   "id": "71546155",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 200, 'loss': 'squared_hinge', 'max_iter': 3000, 'penalty': 'l2'}, 0.6705820359023855\n"
     ]
    }
   ],
   "source": [
    "# 4. LinearSVC\n",
    "\n",
    "from sklearn.svm import LinearSVC\n",
    "\n",
    "\n",
    "parameters = {'penalty': ['l1', 'l2'],\n",
    "              'loss': ['hinge', 'squared_hinge'], \n",
    "              'C':[ 100, 150, 200,300], \n",
    "               'max_iter': [ 2000, 3000,4000,4500,5000] }\n",
    "\n",
    "lsvm= LinearSVC() \n",
    "\n",
    "# select 1000-- higher recall score\n",
    "\n",
    "lsvm = GridSearchCV( lsvm, parameters, n_jobs = 5)\n",
    "\n",
    "lsvm.fit(x_train_1, y_train_sm)\n",
    "\n",
    "print('{}, {}'.format(lsvm.best_params_,lsvm.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1082,
   "id": "f4a1f0b7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ada boost:| Acc: 0.50, Prec: 0.51, Recall: 0.20\n",
      "          dc:| Acc: 0.50, Prec: 1.00, Recall: 0.00\n",
      "          lr:| Acc: 0.59, Prec: 0.56, Recall: 0.83\n",
      "        lsvm:| Acc: 0.61, Prec: 0.57, Recall: 0.88\n",
      "     svc-rbf:| Acc: 0.60, Prec: 0.58, Recall: 0.72\n",
      "          rf:| Acc: 0.51, Prec: 0.52, Recall: 0.24\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "lsvm_pred = lsvm.predict(x_val_1)\n",
    "\n",
    "\n",
    "\n",
    "results['lsvm:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, lsvm_pred),\n",
    "                                                                    precision_score(y_val_sm, lsvm_pred),\n",
    "                                                                    recall_score(y_val_sm, lsvm_pred)) \n",
    "\n",
    "for k, v in results.items():\n",
    "     print('{0:>13}| {1}'.format(k,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afb1acc5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1002,
   "id": "da19774d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 600, 'kernel': 'rbf'}, 0.7964543907429166\n"
     ]
    }
   ],
   "source": [
    " # 5. C-Support Vector Classification-- SVC (kernal: linear and rbf)\n",
    "    \n",
    "from sklearn import svm\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "\n",
    "clf = GridSearchCV(estimator=SVC(),\n",
    "             param_grid={'C': [ 400, 500, 600, 700], 'kernel': ('linear', 'rbf')})\n",
    "\n",
    "clf.fit(x_train_1, y_train_sm)\n",
    "\n",
    "print('{}, {}'.format(clf.best_params_,clf.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1062,
   "id": "dfcd849d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ada boost:| Acc: 0.50, Prec: 0.51, Recall: 0.20\n",
      "          dc:| Acc: 0.50, Prec: 1.00, Recall: 0.00\n",
      "          lr:| Acc: 0.59, Prec: 0.56, Recall: 0.83\n",
      "        lsvm:| Acc: 0.62, Prec: 0.57, Recall: 0.92\n",
      "     svc-rbf:| Acc: 0.60, Prec: 0.58, Recall: 0.72\n"
     ]
    }
   ],
   "source": [
    "\n",
    "clf_pred = clf.predict(x_val_1)\n",
    "\n",
    "results['svc-rbf:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, clf_pred),\n",
    "                                                                    precision_score(y_val_sm, clf_pred),\n",
    "                                                                    recall_score(y_val_sm, clf_pred) ) \n",
    "\n",
    "for k, v in results.items():\n",
    "     print('{0:>13}| {1}'.format(k,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1053,
   "id": "f7e29a8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'criterion': 'gini', 'max_depth': 50, 'max_features': 'auto', 'n_estimators': 200}, 0.9594279384760978\n"
     ]
    }
   ],
   "source": [
    "#6. random forest classifier \n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "\n",
    "rfc = RandomForestClassifier(random_state=42, class_weight = 'balanced')\n",
    "\n",
    "param_grid = { \n",
    "    'n_estimators': [ 150,200,300],\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth' : [20,25,50,100],\n",
    "    'criterion' :['gini', 'entropy']\n",
    "}\n",
    "\n",
    "\n",
    "rf = GridSearchCV(estimator=rfc, param_grid=param_grid, n_jobs = 5)\n",
    "\n",
    "rf.fit(x_train_1, y_train_sm)\n",
    "\n",
    "print('{}, {}'.format(rf.best_params_,rf.best_score_))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1064,
   "id": "b6d50b25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ada boost:| Acc: 0.50, Prec: 0.51, Recall: 0.20\n",
      "          dc:| Acc: 0.50, Prec: 1.00, Recall: 0.00\n",
      "          lr:| Acc: 0.59, Prec: 0.56, Recall: 0.83\n",
      "        lsvm:| Acc: 0.62, Prec: 0.57, Recall: 0.92\n",
      "     svc-rbf:| Acc: 0.60, Prec: 0.58, Recall: 0.72\n",
      "          rf:| Acc: 0.51, Prec: 0.52, Recall: 0.24\n"
     ]
    }
   ],
   "source": [
    "rf_pred = rf.predict(x_val_1)\n",
    "\n",
    "results['rf:'] = 'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_val_sm, rf_pred),\n",
    "                                                                    precision_score(y_val_sm, rf_pred),\n",
    "                                                                    recall_score(y_val_sm, rf_pred)) \n",
    "\n",
    "\n",
    "\n",
    "for k, v in results.items():\n",
    "     print('{0:>13}| {1}'.format(k,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "624a2cce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model  lsvm has highest recall score.\n",
    "# confusion matrix\n",
    "\n",
    "# Recall score is paied most attention \n",
    "# reduce the cost of fraud companies regard as not fraud should be cut and more essential than predict not fraud companies as fraud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c45b9541",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "032ce7f8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1108,
   "id": "819aad70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=LinearSVC(), n_jobs=5,\n",
       "             param_grid={'C': [200], 'loss': ['squared_hinge'],\n",
       "                         'max_iter': [3000], 'penalty': ['l2']})"
      ]
     },
     "execution_count": 1108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Final model is selected by confusion matrix\n",
    "from sklearn.svm import LinearSVC\n",
    "\n",
    "\n",
    "parameters = {'C': [200], 'loss': ['squared_hinge'], 'max_iter': [3000], 'penalty': ['l2']}\n",
    "              \n",
    "\n",
    "lsvm = LinearSVC() \n",
    "\n",
    "model_final = GridSearchCV( lsvm, parameters, n_jobs = 5)\n",
    "\n",
    "model_final.fit(x_train_1, y_train_sm)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1109,
   "id": "0a6c521e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Acc: 0.36, Prec: 0.05, Recall: 0.85'"
      ]
     },
     "execution_count": 1109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "results = model_final.predict(x_test_1)\n",
    "\n",
    "'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_test, results),\n",
    "                                                  precision_score(y_test, results),\n",
    "                                                  recall_score(y_test, results)) \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1132,
   "id": "91c64268",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Acc: 0.30, Prec: 0.04, Recall: 0.90'"
      ]
     },
     "execution_count": 1132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the second best model is logistic regression\n",
    "\n",
    "lr_2= LogisticRegression()\n",
    "\n",
    "parameters_2 = {'C': [0.001], 'penalty': ['l2']} \n",
    "\n",
    "# 0.001 is the best parameter, and add 0.0001  into model-c\n",
    "\n",
    "lr_2 = GridSearchCV( lr_2,  parameters_2, n_jobs = 7 )\n",
    "\n",
    "lr_2.fit(x_train_1, y_train_sm)\n",
    "\n",
    "\n",
    "lr_pred_2 = lr.predict(x_test_1)\n",
    "\n",
    "\n",
    "'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_test, lr_pred_2),\n",
    "                                                                    precision_score(y_test, lr_pred_2),\n",
    "                                                                    recall_score(y_test, lr_pred_2)) \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1133,
   "id": "b93eea79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Acc: 0.42, Prec: 0.04, Recall: 0.66'"
      ]
     },
     "execution_count": 1133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# thrid best model (svc-rbf):\n",
    "\n",
    "\n",
    "clf_2 = GridSearchCV(estimator=SVC(),\n",
    "             param_grid={'C': [600], 'kernel': ['rbf']})\n",
    "\n",
    "clf_2.fit(x_train_1, y_train_sm)\n",
    "\n",
    "\n",
    "\n",
    "clf_pred_2 = clf_2.predict(x_test_1)\n",
    "\n",
    "'Acc: {:.2f}, Prec: {:.2f}, Recall: {:.2f}'.format(accuracy_score(y_test, clf_pred_2),\n",
    "                                                  precision_score(y_test, clf_pred_2),\n",
    "                                                  recall_score(y_test, clf_pred_2)) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de0e2510",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1129,
   "id": "fce02aba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1. ROC score of final_model (LinearSVC)\n",
    "# _predict_proba_lr is used in linear SVC instead of predict_proba\n",
    "\n",
    "lsvm_2 = LinearSVC( C= 200, loss= 'squared_hinge', max_iter= 3000, penalty= 'l2') \n",
    "\n",
    "import seaborn as sns\n",
    "from sklearn import metrics\n",
    "\n",
    "sns.set_style('darkgrid')\n",
    "lsvm_2.fit(x_train_1, y_train_sm)\n",
    "preds_train = lsvm_2.predict(x_train_1)\n",
    "\n",
    " # calculate prediction probability\n",
    "prob_train = np.squeeze(lsvm_2._predict_proba_lr(x_train_1)[:,1].reshape(1,-1))\n",
    "prob_test = np.squeeze(lsvm_2._predict_proba_lr(x_test_1)[:,1].reshape(1,-1))\n",
    "\n",
    " # false positive rate, true positive rate, thresholds\n",
    "fpr1, tpr1, thresholds1 = metrics.roc_curve(y_test, prob_test)\n",
    "fpr2, tpr2, thresholds2 = metrics.roc_curve(y_train_sm, prob_train)\n",
    "\n",
    " # auc score\n",
    "auc1 = metrics.auc(fpr1, tpr1)\n",
    "auc2 = metrics.auc(fpr2, tpr2)\n",
    "plt.figure(figsize=(8,8))\n",
    "\n",
    " # plot auc \n",
    "plt.plot(fpr1, tpr1, color='blue', label='Test ROC curve area = %0.2f'%auc1)\n",
    "plt.plot(fpr2, tpr2, color='green', label='Train ROC curve area = %0.2f'%auc2)\n",
    "plt.plot([0,1],[0,1], 'r--')\n",
    "plt.xlim([-0.1, 1.1])\n",
    "plt.ylim([-0.1, 1.1])\n",
    "plt.xlabel('False Positive Rate', size=14)\n",
    "plt.ylabel('True Positive Rate', size=14)\n",
    "plt.legend(loc='lower right')\n",
    "plt.title('LinearSVC')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2293fa2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROC score of linear SVC indicates that its poor discrimination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1130,
   "id": "ba8de484",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2.  ROC score of second best model (Logistic regression)\n",
    "import seaborn as sns\n",
    "from sklearn import metrics\n",
    "\n",
    "# use lr_2 to do AUC score \n",
    "\n",
    "sns.set_style('darkgrid')\n",
    "preds_train = lr_2.predict(x_train_1)\n",
    "\n",
    " # calculate prediction probability\n",
    "prob_train = np.squeeze(lr_2.predict_proba(x_train_1)[:,1].reshape(1,-1))\n",
    "prob_test = np.squeeze(lr_2.predict_proba(x_test_1)[:,1].reshape(1,-1))\n",
    "\n",
    " # false positive rate, true positive rate, thresholds\n",
    "fpr1, tpr1, thresholds1 = metrics.roc_curve(y_test, prob_test)\n",
    "fpr2, tpr2, thresholds2 = metrics.roc_curve(y_train_sm, prob_train)\n",
    "\n",
    " # auc score\n",
    "auc1 = metrics.auc(fpr1, tpr1)\n",
    "auc2 = metrics.auc(fpr2, tpr2)\n",
    "plt.figure(figsize=(8,8))\n",
    "\n",
    " # plot auc \n",
    "plt.plot(fpr1, tpr1, color='blue', label='Test ROC curve area = %0.2f'%auc1)\n",
    "plt.plot(fpr2, tpr2, color='green', label='Train ROC curve area = %0.2f'%auc2)\n",
    "plt.plot([0,1],[0,1], 'r--')\n",
    "plt.xlim([-0.1, 1.1])\n",
    "plt.ylim([-0.1, 1.1])\n",
    "plt.xlabel('False Positive Rate', size=14)\n",
    "plt.ylabel('True Positive Rate', size=14)\n",
    "plt.legend(loc='lower right')\n",
    "plt.title('Logistic regression')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b2a1e44",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f2f105e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROC score of logistic regression indicates that acceptable discrimination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d66cbab5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1131,
   "id": "446a2997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.  ROC score of final_model (svc-rbf)\n",
    "# _predict_proba_lr is used in linear SVC instead of predict_proba\n",
    "\n",
    "clf_3 = SVC( C= 600, kernel='rbf', probability=True) \n",
    "\n",
    "sns.set_style('darkgrid')\n",
    "clf_3 .fit(x_train_1, y_train_sm)\n",
    "preds_train = clf_3 .predict(x_train_1)\n",
    "\n",
    " # calculate prediction probability\n",
    "prob_train = np.squeeze(clf_3 .predict_proba(x_train_1)[:,1].reshape(1,-1))\n",
    "prob_test = np.squeeze(clf_3 .predict_proba(x_test_1)[:,1].reshape(1,-1))\n",
    "\n",
    " # false positive rate, true positive rate, thresholds\n",
    "fpr1, tpr1, thresholds1 = metrics.roc_curve(y_test, prob_test)\n",
    "fpr2, tpr2, thresholds2 = metrics.roc_curve(y_train_sm, prob_train)\n",
    "\n",
    " # auc score\n",
    "auc1 = metrics.auc(fpr1, tpr1)\n",
    "auc2 = metrics.auc(fpr2, tpr2)\n",
    "plt.figure(figsize=(8,8))\n",
    "\n",
    " # plot auc \n",
    "plt.plot(fpr1, tpr1, color='blue', label='Test ROC curve area = %0.2f'%auc1)\n",
    "plt.plot(fpr2, tpr2, color='green', label='Train ROC curve area = %0.2f'%auc2)\n",
    "plt.plot([0,1],[0,1], 'r--')\n",
    "plt.xlim([-0.1, 1.1])\n",
    "plt.ylim([-0.1, 1.1])\n",
    "plt.xlabel('False Positive Rate', size=14)\n",
    "plt.ylabel('True Positive Rate', size=14)\n",
    "plt.legend(loc='lower right')\n",
    "plt.title('svc-rbf')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5132521",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROC result \n",
    "\n",
    "linear svc: 0.51\n",
    "logistic regression:0.55\n",
    "svc-rbf: 0.53"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a25d8ef2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
